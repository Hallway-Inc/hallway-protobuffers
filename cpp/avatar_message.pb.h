// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avatar_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_avatar_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_avatar_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_avatar_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_avatar_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_avatar_5fmessage_2eproto;
class AvatarPredictionMessage;
struct AvatarPredictionMessageDefaultTypeInternal;
extern AvatarPredictionMessageDefaultTypeInternal _AvatarPredictionMessage_default_instance_;
class BlendShapes;
struct BlendShapesDefaultTypeInternal;
extern BlendShapesDefaultTypeInternal _BlendShapes_default_instance_;
class Rotation;
struct RotationDefaultTypeInternal;
extern RotationDefaultTypeInternal _Rotation_default_instance_;
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AvatarPredictionMessage* Arena::CreateMaybeMessage<::AvatarPredictionMessage>(Arena*);
template<> ::BlendShapes* Arena::CreateMaybeMessage<::BlendShapes>(Arena*);
template<> ::Rotation* Arena::CreateMaybeMessage<::Rotation>(Arena*);
template<> ::Transform* Arena::CreateMaybeMessage<::Transform>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AvatarPredictionMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AvatarPredictionMessage) */ {
 public:
  inline AvatarPredictionMessage() : AvatarPredictionMessage(nullptr) {}
  ~AvatarPredictionMessage() override;
  explicit constexpr AvatarPredictionMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AvatarPredictionMessage(const AvatarPredictionMessage& from);
  AvatarPredictionMessage(AvatarPredictionMessage&& from) noexcept
    : AvatarPredictionMessage() {
    *this = ::std::move(from);
  }

  inline AvatarPredictionMessage& operator=(const AvatarPredictionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvatarPredictionMessage& operator=(AvatarPredictionMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AvatarPredictionMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AvatarPredictionMessage* internal_default_instance() {
    return reinterpret_cast<const AvatarPredictionMessage*>(
               &_AvatarPredictionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AvatarPredictionMessage& a, AvatarPredictionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AvatarPredictionMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AvatarPredictionMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AvatarPredictionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AvatarPredictionMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AvatarPredictionMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AvatarPredictionMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvatarPredictionMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AvatarPredictionMessage";
  }
  protected:
  explicit AvatarPredictionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlendShapesFieldNumber = 1,
    kRotationFieldNumber = 2,
    kTransformFieldNumber = 3,
  };
  // .BlendShapes blendShapes = 1 [json_name = "blendShapes"];
  bool has_blendshapes() const;
  private:
  bool _internal_has_blendshapes() const;
  public:
  void clear_blendshapes();
  const ::BlendShapes& blendshapes() const;
  PROTOBUF_NODISCARD ::BlendShapes* release_blendshapes();
  ::BlendShapes* mutable_blendshapes();
  void set_allocated_blendshapes(::BlendShapes* blendshapes);
  private:
  const ::BlendShapes& _internal_blendshapes() const;
  ::BlendShapes* _internal_mutable_blendshapes();
  public:
  void unsafe_arena_set_allocated_blendshapes(
      ::BlendShapes* blendshapes);
  ::BlendShapes* unsafe_arena_release_blendshapes();

  // .Rotation rotation = 2 [json_name = "rotation"];
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Rotation& rotation() const;
  PROTOBUF_NODISCARD ::Rotation* release_rotation();
  ::Rotation* mutable_rotation();
  void set_allocated_rotation(::Rotation* rotation);
  private:
  const ::Rotation& _internal_rotation() const;
  ::Rotation* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Rotation* rotation);
  ::Rotation* unsafe_arena_release_rotation();

  // .Transform transform = 3 [json_name = "transform"];
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Transform& transform() const;
  PROTOBUF_NODISCARD ::Transform* release_transform();
  ::Transform* mutable_transform();
  void set_allocated_transform(::Transform* transform);
  private:
  const ::Transform& _internal_transform() const;
  ::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Transform* transform);
  ::Transform* unsafe_arena_release_transform();

  // @@protoc_insertion_point(class_scope:AvatarPredictionMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::BlendShapes* blendshapes_;
  ::Rotation* rotation_;
  ::Transform* transform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avatar_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class BlendShapes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlendShapes) */ {
 public:
  inline BlendShapes() : BlendShapes(nullptr) {}
  ~BlendShapes() override;
  explicit constexpr BlendShapes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlendShapes(const BlendShapes& from);
  BlendShapes(BlendShapes&& from) noexcept
    : BlendShapes() {
    *this = ::std::move(from);
  }

  inline BlendShapes& operator=(const BlendShapes& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlendShapes& operator=(BlendShapes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlendShapes& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlendShapes* internal_default_instance() {
    return reinterpret_cast<const BlendShapes*>(
               &_BlendShapes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlendShapes& a, BlendShapes& b) {
    a.Swap(&b);
  }
  inline void Swap(BlendShapes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlendShapes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlendShapes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlendShapes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlendShapes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlendShapes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlendShapes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlendShapes";
  }
  protected:
  explicit BlendShapes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowDownLFieldNumber = 1,
    kBrowDownRFieldNumber = 2,
    kBrowInnerUpFieldNumber = 3,
    kBrowOuterUpLFieldNumber = 4,
    kBrowOuterUpRFieldNumber = 5,
    kCheekSquintLFieldNumber = 6,
    kCheekSquintRFieldNumber = 7,
    kEyeBlinkLFieldNumber = 8,
    kEyeBlinkRFieldNumber = 9,
    kEyeLookDownLFieldNumber = 10,
    kEyeLookDownRFieldNumber = 11,
    kEyeLookInLFieldNumber = 12,
    kEyeLookInRFieldNumber = 13,
    kEyeLookOutLFieldNumber = 14,
    kEyeLookOutRFieldNumber = 15,
    kEyeLookUpLFieldNumber = 16,
    kEyeLookUpRFieldNumber = 17,
    kEyeSquintLFieldNumber = 18,
    kEyeSquintRFieldNumber = 19,
    kEyeWideLFieldNumber = 20,
    kEyeWideRFieldNumber = 21,
    kJawLeftFieldNumber = 22,
    kJawOpenFieldNumber = 23,
    kJawRightFieldNumber = 24,
    kMouthCloseFieldNumber = 25,
    kMouthDimpleLFieldNumber = 26,
    kMouthDimpleRFieldNumber = 27,
    kMouthFrownLFieldNumber = 28,
    kMouthFrownRFieldNumber = 29,
    kMouthFunnelFieldNumber = 30,
    kMouthLeftFieldNumber = 31,
    kMouthLowerDownLFieldNumber = 32,
    kMouthLowerDownRFieldNumber = 33,
    kMouthPressLFieldNumber = 34,
    kMouthPressRFieldNumber = 35,
    kMouthPuckerFieldNumber = 36,
    kMouthRightFieldNumber = 37,
    kMouthRollLowerFieldNumber = 38,
    kMouthRollUpperFieldNumber = 39,
    kMouthShrugLowerFieldNumber = 40,
    kMouthShrugUpperFieldNumber = 41,
    kMouthSmileLFieldNumber = 42,
    kMouthSmileRFieldNumber = 43,
    kMouthStretchLFieldNumber = 44,
    kMouthStretchRFieldNumber = 45,
    kMouthUpperUpLFieldNumber = 46,
    kMouthUpperUpRFieldNumber = 47,
    kNoseSneerLFieldNumber = 48,
    kNoseSneerRFieldNumber = 49,
    kCheekPuffFieldNumber = 50,
    kJawForwardFieldNumber = 51,
    kTongueOutFieldNumber = 52,
  };
  // float browDown_L = 1 [json_name = "browDownL"];
  void clear_browdown_l();
  float browdown_l() const;
  void set_browdown_l(float value);
  private:
  float _internal_browdown_l() const;
  void _internal_set_browdown_l(float value);
  public:

  // float browDown_R = 2 [json_name = "browDownR"];
  void clear_browdown_r();
  float browdown_r() const;
  void set_browdown_r(float value);
  private:
  float _internal_browdown_r() const;
  void _internal_set_browdown_r(float value);
  public:

  // float browInnerUp = 3 [json_name = "browInnerUp"];
  void clear_browinnerup();
  float browinnerup() const;
  void set_browinnerup(float value);
  private:
  float _internal_browinnerup() const;
  void _internal_set_browinnerup(float value);
  public:

  // float browOuterUp_L = 4 [json_name = "browOuterUpL"];
  void clear_browouterup_l();
  float browouterup_l() const;
  void set_browouterup_l(float value);
  private:
  float _internal_browouterup_l() const;
  void _internal_set_browouterup_l(float value);
  public:

  // float browOuterUp_R = 5 [json_name = "browOuterUpR"];
  void clear_browouterup_r();
  float browouterup_r() const;
  void set_browouterup_r(float value);
  private:
  float _internal_browouterup_r() const;
  void _internal_set_browouterup_r(float value);
  public:

  // float cheekSquint_L = 6 [json_name = "cheekSquintL"];
  void clear_cheeksquint_l();
  float cheeksquint_l() const;
  void set_cheeksquint_l(float value);
  private:
  float _internal_cheeksquint_l() const;
  void _internal_set_cheeksquint_l(float value);
  public:

  // float cheekSquint_R = 7 [json_name = "cheekSquintR"];
  void clear_cheeksquint_r();
  float cheeksquint_r() const;
  void set_cheeksquint_r(float value);
  private:
  float _internal_cheeksquint_r() const;
  void _internal_set_cheeksquint_r(float value);
  public:

  // float eyeBlink_L = 8 [json_name = "eyeBlinkL"];
  void clear_eyeblink_l();
  float eyeblink_l() const;
  void set_eyeblink_l(float value);
  private:
  float _internal_eyeblink_l() const;
  void _internal_set_eyeblink_l(float value);
  public:

  // float eyeBlink_R = 9 [json_name = "eyeBlinkR"];
  void clear_eyeblink_r();
  float eyeblink_r() const;
  void set_eyeblink_r(float value);
  private:
  float _internal_eyeblink_r() const;
  void _internal_set_eyeblink_r(float value);
  public:

  // float eyeLookDown_L = 10 [json_name = "eyeLookDownL"];
  void clear_eyelookdown_l();
  float eyelookdown_l() const;
  void set_eyelookdown_l(float value);
  private:
  float _internal_eyelookdown_l() const;
  void _internal_set_eyelookdown_l(float value);
  public:

  // float eyeLookDown_R = 11 [json_name = "eyeLookDownR"];
  void clear_eyelookdown_r();
  float eyelookdown_r() const;
  void set_eyelookdown_r(float value);
  private:
  float _internal_eyelookdown_r() const;
  void _internal_set_eyelookdown_r(float value);
  public:

  // float eyeLookIn_L = 12 [json_name = "eyeLookInL"];
  void clear_eyelookin_l();
  float eyelookin_l() const;
  void set_eyelookin_l(float value);
  private:
  float _internal_eyelookin_l() const;
  void _internal_set_eyelookin_l(float value);
  public:

  // float eyeLookIn_R = 13 [json_name = "eyeLookInR"];
  void clear_eyelookin_r();
  float eyelookin_r() const;
  void set_eyelookin_r(float value);
  private:
  float _internal_eyelookin_r() const;
  void _internal_set_eyelookin_r(float value);
  public:

  // float eyeLookOut_L = 14 [json_name = "eyeLookOutL"];
  void clear_eyelookout_l();
  float eyelookout_l() const;
  void set_eyelookout_l(float value);
  private:
  float _internal_eyelookout_l() const;
  void _internal_set_eyelookout_l(float value);
  public:

  // float eyeLookOut_R = 15 [json_name = "eyeLookOutR"];
  void clear_eyelookout_r();
  float eyelookout_r() const;
  void set_eyelookout_r(float value);
  private:
  float _internal_eyelookout_r() const;
  void _internal_set_eyelookout_r(float value);
  public:

  // float eyeLookUp_L = 16 [json_name = "eyeLookUpL"];
  void clear_eyelookup_l();
  float eyelookup_l() const;
  void set_eyelookup_l(float value);
  private:
  float _internal_eyelookup_l() const;
  void _internal_set_eyelookup_l(float value);
  public:

  // float eyeLookUp_R = 17 [json_name = "eyeLookUpR"];
  void clear_eyelookup_r();
  float eyelookup_r() const;
  void set_eyelookup_r(float value);
  private:
  float _internal_eyelookup_r() const;
  void _internal_set_eyelookup_r(float value);
  public:

  // float eyeSquint_L = 18 [json_name = "eyeSquintL"];
  void clear_eyesquint_l();
  float eyesquint_l() const;
  void set_eyesquint_l(float value);
  private:
  float _internal_eyesquint_l() const;
  void _internal_set_eyesquint_l(float value);
  public:

  // float eyeSquint_R = 19 [json_name = "eyeSquintR"];
  void clear_eyesquint_r();
  float eyesquint_r() const;
  void set_eyesquint_r(float value);
  private:
  float _internal_eyesquint_r() const;
  void _internal_set_eyesquint_r(float value);
  public:

  // float eyeWide_L = 20 [json_name = "eyeWideL"];
  void clear_eyewide_l();
  float eyewide_l() const;
  void set_eyewide_l(float value);
  private:
  float _internal_eyewide_l() const;
  void _internal_set_eyewide_l(float value);
  public:

  // float eyeWide_R = 21 [json_name = "eyeWideR"];
  void clear_eyewide_r();
  float eyewide_r() const;
  void set_eyewide_r(float value);
  private:
  float _internal_eyewide_r() const;
  void _internal_set_eyewide_r(float value);
  public:

  // float jawLeft = 22 [json_name = "jawLeft"];
  void clear_jawleft();
  float jawleft() const;
  void set_jawleft(float value);
  private:
  float _internal_jawleft() const;
  void _internal_set_jawleft(float value);
  public:

  // float jawOpen = 23 [json_name = "jawOpen"];
  void clear_jawopen();
  float jawopen() const;
  void set_jawopen(float value);
  private:
  float _internal_jawopen() const;
  void _internal_set_jawopen(float value);
  public:

  // float jawRight = 24 [json_name = "jawRight"];
  void clear_jawright();
  float jawright() const;
  void set_jawright(float value);
  private:
  float _internal_jawright() const;
  void _internal_set_jawright(float value);
  public:

  // float mouthClose = 25 [json_name = "mouthClose"];
  void clear_mouthclose();
  float mouthclose() const;
  void set_mouthclose(float value);
  private:
  float _internal_mouthclose() const;
  void _internal_set_mouthclose(float value);
  public:

  // float mouthDimple_L = 26 [json_name = "mouthDimpleL"];
  void clear_mouthdimple_l();
  float mouthdimple_l() const;
  void set_mouthdimple_l(float value);
  private:
  float _internal_mouthdimple_l() const;
  void _internal_set_mouthdimple_l(float value);
  public:

  // float mouthDimple_R = 27 [json_name = "mouthDimpleR"];
  void clear_mouthdimple_r();
  float mouthdimple_r() const;
  void set_mouthdimple_r(float value);
  private:
  float _internal_mouthdimple_r() const;
  void _internal_set_mouthdimple_r(float value);
  public:

  // float mouthFrown_L = 28 [json_name = "mouthFrownL"];
  void clear_mouthfrown_l();
  float mouthfrown_l() const;
  void set_mouthfrown_l(float value);
  private:
  float _internal_mouthfrown_l() const;
  void _internal_set_mouthfrown_l(float value);
  public:

  // float mouthFrown_R = 29 [json_name = "mouthFrownR"];
  void clear_mouthfrown_r();
  float mouthfrown_r() const;
  void set_mouthfrown_r(float value);
  private:
  float _internal_mouthfrown_r() const;
  void _internal_set_mouthfrown_r(float value);
  public:

  // float mouthFunnel = 30 [json_name = "mouthFunnel"];
  void clear_mouthfunnel();
  float mouthfunnel() const;
  void set_mouthfunnel(float value);
  private:
  float _internal_mouthfunnel() const;
  void _internal_set_mouthfunnel(float value);
  public:

  // float mouthLeft = 31 [json_name = "mouthLeft"];
  void clear_mouthleft();
  float mouthleft() const;
  void set_mouthleft(float value);
  private:
  float _internal_mouthleft() const;
  void _internal_set_mouthleft(float value);
  public:

  // float mouthLowerDown_L = 32 [json_name = "mouthLowerDownL"];
  void clear_mouthlowerdown_l();
  float mouthlowerdown_l() const;
  void set_mouthlowerdown_l(float value);
  private:
  float _internal_mouthlowerdown_l() const;
  void _internal_set_mouthlowerdown_l(float value);
  public:

  // float mouthLowerDown_R = 33 [json_name = "mouthLowerDownR"];
  void clear_mouthlowerdown_r();
  float mouthlowerdown_r() const;
  void set_mouthlowerdown_r(float value);
  private:
  float _internal_mouthlowerdown_r() const;
  void _internal_set_mouthlowerdown_r(float value);
  public:

  // float mouthPress_L = 34 [json_name = "mouthPressL"];
  void clear_mouthpress_l();
  float mouthpress_l() const;
  void set_mouthpress_l(float value);
  private:
  float _internal_mouthpress_l() const;
  void _internal_set_mouthpress_l(float value);
  public:

  // float mouthPress_R = 35 [json_name = "mouthPressR"];
  void clear_mouthpress_r();
  float mouthpress_r() const;
  void set_mouthpress_r(float value);
  private:
  float _internal_mouthpress_r() const;
  void _internal_set_mouthpress_r(float value);
  public:

  // float mouthPucker = 36 [json_name = "mouthPucker"];
  void clear_mouthpucker();
  float mouthpucker() const;
  void set_mouthpucker(float value);
  private:
  float _internal_mouthpucker() const;
  void _internal_set_mouthpucker(float value);
  public:

  // float mouthRight = 37 [json_name = "mouthRight"];
  void clear_mouthright();
  float mouthright() const;
  void set_mouthright(float value);
  private:
  float _internal_mouthright() const;
  void _internal_set_mouthright(float value);
  public:

  // float mouthRollLower = 38 [json_name = "mouthRollLower"];
  void clear_mouthrolllower();
  float mouthrolllower() const;
  void set_mouthrolllower(float value);
  private:
  float _internal_mouthrolllower() const;
  void _internal_set_mouthrolllower(float value);
  public:

  // float mouthRollUpper = 39 [json_name = "mouthRollUpper"];
  void clear_mouthrollupper();
  float mouthrollupper() const;
  void set_mouthrollupper(float value);
  private:
  float _internal_mouthrollupper() const;
  void _internal_set_mouthrollupper(float value);
  public:

  // float mouthShrugLower = 40 [json_name = "mouthShrugLower"];
  void clear_mouthshruglower();
  float mouthshruglower() const;
  void set_mouthshruglower(float value);
  private:
  float _internal_mouthshruglower() const;
  void _internal_set_mouthshruglower(float value);
  public:

  // float mouthShrugUpper = 41 [json_name = "mouthShrugUpper"];
  void clear_mouthshrugupper();
  float mouthshrugupper() const;
  void set_mouthshrugupper(float value);
  private:
  float _internal_mouthshrugupper() const;
  void _internal_set_mouthshrugupper(float value);
  public:

  // float mouthSmile_L = 42 [json_name = "mouthSmileL"];
  void clear_mouthsmile_l();
  float mouthsmile_l() const;
  void set_mouthsmile_l(float value);
  private:
  float _internal_mouthsmile_l() const;
  void _internal_set_mouthsmile_l(float value);
  public:

  // float mouthSmile_R = 43 [json_name = "mouthSmileR"];
  void clear_mouthsmile_r();
  float mouthsmile_r() const;
  void set_mouthsmile_r(float value);
  private:
  float _internal_mouthsmile_r() const;
  void _internal_set_mouthsmile_r(float value);
  public:

  // float mouthStretch_L = 44 [json_name = "mouthStretchL"];
  void clear_mouthstretch_l();
  float mouthstretch_l() const;
  void set_mouthstretch_l(float value);
  private:
  float _internal_mouthstretch_l() const;
  void _internal_set_mouthstretch_l(float value);
  public:

  // float mouthStretch_R = 45 [json_name = "mouthStretchR"];
  void clear_mouthstretch_r();
  float mouthstretch_r() const;
  void set_mouthstretch_r(float value);
  private:
  float _internal_mouthstretch_r() const;
  void _internal_set_mouthstretch_r(float value);
  public:

  // float mouthUpperUp_L = 46 [json_name = "mouthUpperUpL"];
  void clear_mouthupperup_l();
  float mouthupperup_l() const;
  void set_mouthupperup_l(float value);
  private:
  float _internal_mouthupperup_l() const;
  void _internal_set_mouthupperup_l(float value);
  public:

  // float mouthUpperUp_R = 47 [json_name = "mouthUpperUpR"];
  void clear_mouthupperup_r();
  float mouthupperup_r() const;
  void set_mouthupperup_r(float value);
  private:
  float _internal_mouthupperup_r() const;
  void _internal_set_mouthupperup_r(float value);
  public:

  // float noseSneer_L = 48 [json_name = "noseSneerL"];
  void clear_nosesneer_l();
  float nosesneer_l() const;
  void set_nosesneer_l(float value);
  private:
  float _internal_nosesneer_l() const;
  void _internal_set_nosesneer_l(float value);
  public:

  // float noseSneer_R = 49 [json_name = "noseSneerR"];
  void clear_nosesneer_r();
  float nosesneer_r() const;
  void set_nosesneer_r(float value);
  private:
  float _internal_nosesneer_r() const;
  void _internal_set_nosesneer_r(float value);
  public:

  // float cheekPuff = 50 [json_name = "cheekPuff"];
  void clear_cheekpuff();
  float cheekpuff() const;
  void set_cheekpuff(float value);
  private:
  float _internal_cheekpuff() const;
  void _internal_set_cheekpuff(float value);
  public:

  // float jawForward = 51 [json_name = "jawForward"];
  void clear_jawforward();
  float jawforward() const;
  void set_jawforward(float value);
  private:
  float _internal_jawforward() const;
  void _internal_set_jawforward(float value);
  public:

  // float tongueOut = 52 [json_name = "tongueOut"];
  void clear_tongueout();
  float tongueout() const;
  void set_tongueout(float value);
  private:
  float _internal_tongueout() const;
  void _internal_set_tongueout(float value);
  public:

  // @@protoc_insertion_point(class_scope:BlendShapes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float browdown_l_;
  float browdown_r_;
  float browinnerup_;
  float browouterup_l_;
  float browouterup_r_;
  float cheeksquint_l_;
  float cheeksquint_r_;
  float eyeblink_l_;
  float eyeblink_r_;
  float eyelookdown_l_;
  float eyelookdown_r_;
  float eyelookin_l_;
  float eyelookin_r_;
  float eyelookout_l_;
  float eyelookout_r_;
  float eyelookup_l_;
  float eyelookup_r_;
  float eyesquint_l_;
  float eyesquint_r_;
  float eyewide_l_;
  float eyewide_r_;
  float jawleft_;
  float jawopen_;
  float jawright_;
  float mouthclose_;
  float mouthdimple_l_;
  float mouthdimple_r_;
  float mouthfrown_l_;
  float mouthfrown_r_;
  float mouthfunnel_;
  float mouthleft_;
  float mouthlowerdown_l_;
  float mouthlowerdown_r_;
  float mouthpress_l_;
  float mouthpress_r_;
  float mouthpucker_;
  float mouthright_;
  float mouthrolllower_;
  float mouthrollupper_;
  float mouthshruglower_;
  float mouthshrugupper_;
  float mouthsmile_l_;
  float mouthsmile_r_;
  float mouthstretch_l_;
  float mouthstretch_r_;
  float mouthupperup_l_;
  float mouthupperup_r_;
  float nosesneer_l_;
  float nosesneer_r_;
  float cheekpuff_;
  float jawforward_;
  float tongueout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avatar_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Rotation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rotation) */ {
 public:
  inline Rotation() : Rotation(nullptr) {}
  ~Rotation() override;
  explicit constexpr Rotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rotation(const Rotation& from);
  Rotation(Rotation&& from) noexcept
    : Rotation() {
    *this = ::std::move(from);
  }

  inline Rotation& operator=(const Rotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rotation& operator=(Rotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rotation* internal_default_instance() {
    return reinterpret_cast<const Rotation*>(
               &_Rotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Rotation& a, Rotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Rotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rotation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rotation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Rotation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rotation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rotation";
  }
  protected:
  explicit Rotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPitchFieldNumber = 1,
    kRollFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // optional float pitch = 1 [json_name = "pitch"];
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // optional float roll = 2 [json_name = "roll"];
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // optional float yaw = 3 [json_name = "yaw"];
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:Rotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float pitch_;
  float roll_;
  float yaw_;
  friend struct ::TableStruct_avatar_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Transform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  ~Transform() override;
  explicit constexpr Transform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transform& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transform& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Transform";
  }
  protected:
  explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional float x = 1 [json_name = "x"];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2 [json_name = "y"];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3 [json_name = "z"];
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_avatar_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AvatarPredictionMessage

// .BlendShapes blendShapes = 1 [json_name = "blendShapes"];
inline bool AvatarPredictionMessage::_internal_has_blendshapes() const {
  return this != internal_default_instance() && blendshapes_ != nullptr;
}
inline bool AvatarPredictionMessage::has_blendshapes() const {
  return _internal_has_blendshapes();
}
inline void AvatarPredictionMessage::clear_blendshapes() {
  if (GetArenaForAllocation() == nullptr && blendshapes_ != nullptr) {
    delete blendshapes_;
  }
  blendshapes_ = nullptr;
}
inline const ::BlendShapes& AvatarPredictionMessage::_internal_blendshapes() const {
  const ::BlendShapes* p = blendshapes_;
  return p != nullptr ? *p : reinterpret_cast<const ::BlendShapes&>(
      ::_BlendShapes_default_instance_);
}
inline const ::BlendShapes& AvatarPredictionMessage::blendshapes() const {
  // @@protoc_insertion_point(field_get:AvatarPredictionMessage.blendShapes)
  return _internal_blendshapes();
}
inline void AvatarPredictionMessage::unsafe_arena_set_allocated_blendshapes(
    ::BlendShapes* blendshapes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blendshapes_);
  }
  blendshapes_ = blendshapes;
  if (blendshapes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AvatarPredictionMessage.blendShapes)
}
inline ::BlendShapes* AvatarPredictionMessage::release_blendshapes() {
  
  ::BlendShapes* temp = blendshapes_;
  blendshapes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BlendShapes* AvatarPredictionMessage::unsafe_arena_release_blendshapes() {
  // @@protoc_insertion_point(field_release:AvatarPredictionMessage.blendShapes)
  
  ::BlendShapes* temp = blendshapes_;
  blendshapes_ = nullptr;
  return temp;
}
inline ::BlendShapes* AvatarPredictionMessage::_internal_mutable_blendshapes() {
  
  if (blendshapes_ == nullptr) {
    auto* p = CreateMaybeMessage<::BlendShapes>(GetArenaForAllocation());
    blendshapes_ = p;
  }
  return blendshapes_;
}
inline ::BlendShapes* AvatarPredictionMessage::mutable_blendshapes() {
  ::BlendShapes* _msg = _internal_mutable_blendshapes();
  // @@protoc_insertion_point(field_mutable:AvatarPredictionMessage.blendShapes)
  return _msg;
}
inline void AvatarPredictionMessage::set_allocated_blendshapes(::BlendShapes* blendshapes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete blendshapes_;
  }
  if (blendshapes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::BlendShapes>::GetOwningArena(blendshapes);
    if (message_arena != submessage_arena) {
      blendshapes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blendshapes, submessage_arena);
    }
    
  } else {
    
  }
  blendshapes_ = blendshapes;
  // @@protoc_insertion_point(field_set_allocated:AvatarPredictionMessage.blendShapes)
}

// .Rotation rotation = 2 [json_name = "rotation"];
inline bool AvatarPredictionMessage::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool AvatarPredictionMessage::has_rotation() const {
  return _internal_has_rotation();
}
inline void AvatarPredictionMessage::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::Rotation& AvatarPredictionMessage::_internal_rotation() const {
  const ::Rotation* p = rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Rotation&>(
      ::_Rotation_default_instance_);
}
inline const ::Rotation& AvatarPredictionMessage::rotation() const {
  // @@protoc_insertion_point(field_get:AvatarPredictionMessage.rotation)
  return _internal_rotation();
}
inline void AvatarPredictionMessage::unsafe_arena_set_allocated_rotation(
    ::Rotation* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AvatarPredictionMessage.rotation)
}
inline ::Rotation* AvatarPredictionMessage::release_rotation() {
  
  ::Rotation* temp = rotation_;
  rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Rotation* AvatarPredictionMessage::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:AvatarPredictionMessage.rotation)
  
  ::Rotation* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::Rotation* AvatarPredictionMessage::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Rotation>(GetArenaForAllocation());
    rotation_ = p;
  }
  return rotation_;
}
inline ::Rotation* AvatarPredictionMessage::mutable_rotation() {
  ::Rotation* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:AvatarPredictionMessage.rotation)
  return _msg;
}
inline void AvatarPredictionMessage::set_allocated_rotation(::Rotation* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Rotation>::GetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:AvatarPredictionMessage.rotation)
}

// .Transform transform = 3 [json_name = "transform"];
inline bool AvatarPredictionMessage::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool AvatarPredictionMessage::has_transform() const {
  return _internal_has_transform();
}
inline void AvatarPredictionMessage::clear_transform() {
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
inline const ::Transform& AvatarPredictionMessage::_internal_transform() const {
  const ::Transform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Transform&>(
      ::_Transform_default_instance_);
}
inline const ::Transform& AvatarPredictionMessage::transform() const {
  // @@protoc_insertion_point(field_get:AvatarPredictionMessage.transform)
  return _internal_transform();
}
inline void AvatarPredictionMessage::unsafe_arena_set_allocated_transform(
    ::Transform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AvatarPredictionMessage.transform)
}
inline ::Transform* AvatarPredictionMessage::release_transform() {
  
  ::Transform* temp = transform_;
  transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Transform* AvatarPredictionMessage::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:AvatarPredictionMessage.transform)
  
  ::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::Transform* AvatarPredictionMessage::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Transform>(GetArenaForAllocation());
    transform_ = p;
  }
  return transform_;
}
inline ::Transform* AvatarPredictionMessage::mutable_transform() {
  ::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:AvatarPredictionMessage.transform)
  return _msg;
}
inline void AvatarPredictionMessage::set_allocated_transform(::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Transform>::GetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:AvatarPredictionMessage.transform)
}

// -------------------------------------------------------------------

// BlendShapes

// float browDown_L = 1 [json_name = "browDownL"];
inline void BlendShapes::clear_browdown_l() {
  browdown_l_ = 0;
}
inline float BlendShapes::_internal_browdown_l() const {
  return browdown_l_;
}
inline float BlendShapes::browdown_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.browDown_L)
  return _internal_browdown_l();
}
inline void BlendShapes::_internal_set_browdown_l(float value) {
  
  browdown_l_ = value;
}
inline void BlendShapes::set_browdown_l(float value) {
  _internal_set_browdown_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.browDown_L)
}

// float browDown_R = 2 [json_name = "browDownR"];
inline void BlendShapes::clear_browdown_r() {
  browdown_r_ = 0;
}
inline float BlendShapes::_internal_browdown_r() const {
  return browdown_r_;
}
inline float BlendShapes::browdown_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.browDown_R)
  return _internal_browdown_r();
}
inline void BlendShapes::_internal_set_browdown_r(float value) {
  
  browdown_r_ = value;
}
inline void BlendShapes::set_browdown_r(float value) {
  _internal_set_browdown_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.browDown_R)
}

// float browInnerUp = 3 [json_name = "browInnerUp"];
inline void BlendShapes::clear_browinnerup() {
  browinnerup_ = 0;
}
inline float BlendShapes::_internal_browinnerup() const {
  return browinnerup_;
}
inline float BlendShapes::browinnerup() const {
  // @@protoc_insertion_point(field_get:BlendShapes.browInnerUp)
  return _internal_browinnerup();
}
inline void BlendShapes::_internal_set_browinnerup(float value) {
  
  browinnerup_ = value;
}
inline void BlendShapes::set_browinnerup(float value) {
  _internal_set_browinnerup(value);
  // @@protoc_insertion_point(field_set:BlendShapes.browInnerUp)
}

// float browOuterUp_L = 4 [json_name = "browOuterUpL"];
inline void BlendShapes::clear_browouterup_l() {
  browouterup_l_ = 0;
}
inline float BlendShapes::_internal_browouterup_l() const {
  return browouterup_l_;
}
inline float BlendShapes::browouterup_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.browOuterUp_L)
  return _internal_browouterup_l();
}
inline void BlendShapes::_internal_set_browouterup_l(float value) {
  
  browouterup_l_ = value;
}
inline void BlendShapes::set_browouterup_l(float value) {
  _internal_set_browouterup_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.browOuterUp_L)
}

// float browOuterUp_R = 5 [json_name = "browOuterUpR"];
inline void BlendShapes::clear_browouterup_r() {
  browouterup_r_ = 0;
}
inline float BlendShapes::_internal_browouterup_r() const {
  return browouterup_r_;
}
inline float BlendShapes::browouterup_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.browOuterUp_R)
  return _internal_browouterup_r();
}
inline void BlendShapes::_internal_set_browouterup_r(float value) {
  
  browouterup_r_ = value;
}
inline void BlendShapes::set_browouterup_r(float value) {
  _internal_set_browouterup_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.browOuterUp_R)
}

// float cheekSquint_L = 6 [json_name = "cheekSquintL"];
inline void BlendShapes::clear_cheeksquint_l() {
  cheeksquint_l_ = 0;
}
inline float BlendShapes::_internal_cheeksquint_l() const {
  return cheeksquint_l_;
}
inline float BlendShapes::cheeksquint_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.cheekSquint_L)
  return _internal_cheeksquint_l();
}
inline void BlendShapes::_internal_set_cheeksquint_l(float value) {
  
  cheeksquint_l_ = value;
}
inline void BlendShapes::set_cheeksquint_l(float value) {
  _internal_set_cheeksquint_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.cheekSquint_L)
}

// float cheekSquint_R = 7 [json_name = "cheekSquintR"];
inline void BlendShapes::clear_cheeksquint_r() {
  cheeksquint_r_ = 0;
}
inline float BlendShapes::_internal_cheeksquint_r() const {
  return cheeksquint_r_;
}
inline float BlendShapes::cheeksquint_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.cheekSquint_R)
  return _internal_cheeksquint_r();
}
inline void BlendShapes::_internal_set_cheeksquint_r(float value) {
  
  cheeksquint_r_ = value;
}
inline void BlendShapes::set_cheeksquint_r(float value) {
  _internal_set_cheeksquint_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.cheekSquint_R)
}

// float eyeBlink_L = 8 [json_name = "eyeBlinkL"];
inline void BlendShapes::clear_eyeblink_l() {
  eyeblink_l_ = 0;
}
inline float BlendShapes::_internal_eyeblink_l() const {
  return eyeblink_l_;
}
inline float BlendShapes::eyeblink_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.eyeBlink_L)
  return _internal_eyeblink_l();
}
inline void BlendShapes::_internal_set_eyeblink_l(float value) {
  
  eyeblink_l_ = value;
}
inline void BlendShapes::set_eyeblink_l(float value) {
  _internal_set_eyeblink_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.eyeBlink_L)
}

// float eyeBlink_R = 9 [json_name = "eyeBlinkR"];
inline void BlendShapes::clear_eyeblink_r() {
  eyeblink_r_ = 0;
}
inline float BlendShapes::_internal_eyeblink_r() const {
  return eyeblink_r_;
}
inline float BlendShapes::eyeblink_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.eyeBlink_R)
  return _internal_eyeblink_r();
}
inline void BlendShapes::_internal_set_eyeblink_r(float value) {
  
  eyeblink_r_ = value;
}
inline void BlendShapes::set_eyeblink_r(float value) {
  _internal_set_eyeblink_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.eyeBlink_R)
}

// float eyeLookDown_L = 10 [json_name = "eyeLookDownL"];
inline void BlendShapes::clear_eyelookdown_l() {
  eyelookdown_l_ = 0;
}
inline float BlendShapes::_internal_eyelookdown_l() const {
  return eyelookdown_l_;
}
inline float BlendShapes::eyelookdown_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.eyeLookDown_L)
  return _internal_eyelookdown_l();
}
inline void BlendShapes::_internal_set_eyelookdown_l(float value) {
  
  eyelookdown_l_ = value;
}
inline void BlendShapes::set_eyelookdown_l(float value) {
  _internal_set_eyelookdown_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.eyeLookDown_L)
}

// float eyeLookDown_R = 11 [json_name = "eyeLookDownR"];
inline void BlendShapes::clear_eyelookdown_r() {
  eyelookdown_r_ = 0;
}
inline float BlendShapes::_internal_eyelookdown_r() const {
  return eyelookdown_r_;
}
inline float BlendShapes::eyelookdown_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.eyeLookDown_R)
  return _internal_eyelookdown_r();
}
inline void BlendShapes::_internal_set_eyelookdown_r(float value) {
  
  eyelookdown_r_ = value;
}
inline void BlendShapes::set_eyelookdown_r(float value) {
  _internal_set_eyelookdown_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.eyeLookDown_R)
}

// float eyeLookIn_L = 12 [json_name = "eyeLookInL"];
inline void BlendShapes::clear_eyelookin_l() {
  eyelookin_l_ = 0;
}
inline float BlendShapes::_internal_eyelookin_l() const {
  return eyelookin_l_;
}
inline float BlendShapes::eyelookin_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.eyeLookIn_L)
  return _internal_eyelookin_l();
}
inline void BlendShapes::_internal_set_eyelookin_l(float value) {
  
  eyelookin_l_ = value;
}
inline void BlendShapes::set_eyelookin_l(float value) {
  _internal_set_eyelookin_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.eyeLookIn_L)
}

// float eyeLookIn_R = 13 [json_name = "eyeLookInR"];
inline void BlendShapes::clear_eyelookin_r() {
  eyelookin_r_ = 0;
}
inline float BlendShapes::_internal_eyelookin_r() const {
  return eyelookin_r_;
}
inline float BlendShapes::eyelookin_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.eyeLookIn_R)
  return _internal_eyelookin_r();
}
inline void BlendShapes::_internal_set_eyelookin_r(float value) {
  
  eyelookin_r_ = value;
}
inline void BlendShapes::set_eyelookin_r(float value) {
  _internal_set_eyelookin_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.eyeLookIn_R)
}

// float eyeLookOut_L = 14 [json_name = "eyeLookOutL"];
inline void BlendShapes::clear_eyelookout_l() {
  eyelookout_l_ = 0;
}
inline float BlendShapes::_internal_eyelookout_l() const {
  return eyelookout_l_;
}
inline float BlendShapes::eyelookout_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.eyeLookOut_L)
  return _internal_eyelookout_l();
}
inline void BlendShapes::_internal_set_eyelookout_l(float value) {
  
  eyelookout_l_ = value;
}
inline void BlendShapes::set_eyelookout_l(float value) {
  _internal_set_eyelookout_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.eyeLookOut_L)
}

// float eyeLookOut_R = 15 [json_name = "eyeLookOutR"];
inline void BlendShapes::clear_eyelookout_r() {
  eyelookout_r_ = 0;
}
inline float BlendShapes::_internal_eyelookout_r() const {
  return eyelookout_r_;
}
inline float BlendShapes::eyelookout_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.eyeLookOut_R)
  return _internal_eyelookout_r();
}
inline void BlendShapes::_internal_set_eyelookout_r(float value) {
  
  eyelookout_r_ = value;
}
inline void BlendShapes::set_eyelookout_r(float value) {
  _internal_set_eyelookout_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.eyeLookOut_R)
}

// float eyeLookUp_L = 16 [json_name = "eyeLookUpL"];
inline void BlendShapes::clear_eyelookup_l() {
  eyelookup_l_ = 0;
}
inline float BlendShapes::_internal_eyelookup_l() const {
  return eyelookup_l_;
}
inline float BlendShapes::eyelookup_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.eyeLookUp_L)
  return _internal_eyelookup_l();
}
inline void BlendShapes::_internal_set_eyelookup_l(float value) {
  
  eyelookup_l_ = value;
}
inline void BlendShapes::set_eyelookup_l(float value) {
  _internal_set_eyelookup_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.eyeLookUp_L)
}

// float eyeLookUp_R = 17 [json_name = "eyeLookUpR"];
inline void BlendShapes::clear_eyelookup_r() {
  eyelookup_r_ = 0;
}
inline float BlendShapes::_internal_eyelookup_r() const {
  return eyelookup_r_;
}
inline float BlendShapes::eyelookup_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.eyeLookUp_R)
  return _internal_eyelookup_r();
}
inline void BlendShapes::_internal_set_eyelookup_r(float value) {
  
  eyelookup_r_ = value;
}
inline void BlendShapes::set_eyelookup_r(float value) {
  _internal_set_eyelookup_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.eyeLookUp_R)
}

// float eyeSquint_L = 18 [json_name = "eyeSquintL"];
inline void BlendShapes::clear_eyesquint_l() {
  eyesquint_l_ = 0;
}
inline float BlendShapes::_internal_eyesquint_l() const {
  return eyesquint_l_;
}
inline float BlendShapes::eyesquint_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.eyeSquint_L)
  return _internal_eyesquint_l();
}
inline void BlendShapes::_internal_set_eyesquint_l(float value) {
  
  eyesquint_l_ = value;
}
inline void BlendShapes::set_eyesquint_l(float value) {
  _internal_set_eyesquint_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.eyeSquint_L)
}

// float eyeSquint_R = 19 [json_name = "eyeSquintR"];
inline void BlendShapes::clear_eyesquint_r() {
  eyesquint_r_ = 0;
}
inline float BlendShapes::_internal_eyesquint_r() const {
  return eyesquint_r_;
}
inline float BlendShapes::eyesquint_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.eyeSquint_R)
  return _internal_eyesquint_r();
}
inline void BlendShapes::_internal_set_eyesquint_r(float value) {
  
  eyesquint_r_ = value;
}
inline void BlendShapes::set_eyesquint_r(float value) {
  _internal_set_eyesquint_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.eyeSquint_R)
}

// float eyeWide_L = 20 [json_name = "eyeWideL"];
inline void BlendShapes::clear_eyewide_l() {
  eyewide_l_ = 0;
}
inline float BlendShapes::_internal_eyewide_l() const {
  return eyewide_l_;
}
inline float BlendShapes::eyewide_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.eyeWide_L)
  return _internal_eyewide_l();
}
inline void BlendShapes::_internal_set_eyewide_l(float value) {
  
  eyewide_l_ = value;
}
inline void BlendShapes::set_eyewide_l(float value) {
  _internal_set_eyewide_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.eyeWide_L)
}

// float eyeWide_R = 21 [json_name = "eyeWideR"];
inline void BlendShapes::clear_eyewide_r() {
  eyewide_r_ = 0;
}
inline float BlendShapes::_internal_eyewide_r() const {
  return eyewide_r_;
}
inline float BlendShapes::eyewide_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.eyeWide_R)
  return _internal_eyewide_r();
}
inline void BlendShapes::_internal_set_eyewide_r(float value) {
  
  eyewide_r_ = value;
}
inline void BlendShapes::set_eyewide_r(float value) {
  _internal_set_eyewide_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.eyeWide_R)
}

// float jawLeft = 22 [json_name = "jawLeft"];
inline void BlendShapes::clear_jawleft() {
  jawleft_ = 0;
}
inline float BlendShapes::_internal_jawleft() const {
  return jawleft_;
}
inline float BlendShapes::jawleft() const {
  // @@protoc_insertion_point(field_get:BlendShapes.jawLeft)
  return _internal_jawleft();
}
inline void BlendShapes::_internal_set_jawleft(float value) {
  
  jawleft_ = value;
}
inline void BlendShapes::set_jawleft(float value) {
  _internal_set_jawleft(value);
  // @@protoc_insertion_point(field_set:BlendShapes.jawLeft)
}

// float jawOpen = 23 [json_name = "jawOpen"];
inline void BlendShapes::clear_jawopen() {
  jawopen_ = 0;
}
inline float BlendShapes::_internal_jawopen() const {
  return jawopen_;
}
inline float BlendShapes::jawopen() const {
  // @@protoc_insertion_point(field_get:BlendShapes.jawOpen)
  return _internal_jawopen();
}
inline void BlendShapes::_internal_set_jawopen(float value) {
  
  jawopen_ = value;
}
inline void BlendShapes::set_jawopen(float value) {
  _internal_set_jawopen(value);
  // @@protoc_insertion_point(field_set:BlendShapes.jawOpen)
}

// float jawRight = 24 [json_name = "jawRight"];
inline void BlendShapes::clear_jawright() {
  jawright_ = 0;
}
inline float BlendShapes::_internal_jawright() const {
  return jawright_;
}
inline float BlendShapes::jawright() const {
  // @@protoc_insertion_point(field_get:BlendShapes.jawRight)
  return _internal_jawright();
}
inline void BlendShapes::_internal_set_jawright(float value) {
  
  jawright_ = value;
}
inline void BlendShapes::set_jawright(float value) {
  _internal_set_jawright(value);
  // @@protoc_insertion_point(field_set:BlendShapes.jawRight)
}

// float mouthClose = 25 [json_name = "mouthClose"];
inline void BlendShapes::clear_mouthclose() {
  mouthclose_ = 0;
}
inline float BlendShapes::_internal_mouthclose() const {
  return mouthclose_;
}
inline float BlendShapes::mouthclose() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthClose)
  return _internal_mouthclose();
}
inline void BlendShapes::_internal_set_mouthclose(float value) {
  
  mouthclose_ = value;
}
inline void BlendShapes::set_mouthclose(float value) {
  _internal_set_mouthclose(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthClose)
}

// float mouthDimple_L = 26 [json_name = "mouthDimpleL"];
inline void BlendShapes::clear_mouthdimple_l() {
  mouthdimple_l_ = 0;
}
inline float BlendShapes::_internal_mouthdimple_l() const {
  return mouthdimple_l_;
}
inline float BlendShapes::mouthdimple_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthDimple_L)
  return _internal_mouthdimple_l();
}
inline void BlendShapes::_internal_set_mouthdimple_l(float value) {
  
  mouthdimple_l_ = value;
}
inline void BlendShapes::set_mouthdimple_l(float value) {
  _internal_set_mouthdimple_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthDimple_L)
}

// float mouthDimple_R = 27 [json_name = "mouthDimpleR"];
inline void BlendShapes::clear_mouthdimple_r() {
  mouthdimple_r_ = 0;
}
inline float BlendShapes::_internal_mouthdimple_r() const {
  return mouthdimple_r_;
}
inline float BlendShapes::mouthdimple_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthDimple_R)
  return _internal_mouthdimple_r();
}
inline void BlendShapes::_internal_set_mouthdimple_r(float value) {
  
  mouthdimple_r_ = value;
}
inline void BlendShapes::set_mouthdimple_r(float value) {
  _internal_set_mouthdimple_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthDimple_R)
}

// float mouthFrown_L = 28 [json_name = "mouthFrownL"];
inline void BlendShapes::clear_mouthfrown_l() {
  mouthfrown_l_ = 0;
}
inline float BlendShapes::_internal_mouthfrown_l() const {
  return mouthfrown_l_;
}
inline float BlendShapes::mouthfrown_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthFrown_L)
  return _internal_mouthfrown_l();
}
inline void BlendShapes::_internal_set_mouthfrown_l(float value) {
  
  mouthfrown_l_ = value;
}
inline void BlendShapes::set_mouthfrown_l(float value) {
  _internal_set_mouthfrown_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthFrown_L)
}

// float mouthFrown_R = 29 [json_name = "mouthFrownR"];
inline void BlendShapes::clear_mouthfrown_r() {
  mouthfrown_r_ = 0;
}
inline float BlendShapes::_internal_mouthfrown_r() const {
  return mouthfrown_r_;
}
inline float BlendShapes::mouthfrown_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthFrown_R)
  return _internal_mouthfrown_r();
}
inline void BlendShapes::_internal_set_mouthfrown_r(float value) {
  
  mouthfrown_r_ = value;
}
inline void BlendShapes::set_mouthfrown_r(float value) {
  _internal_set_mouthfrown_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthFrown_R)
}

// float mouthFunnel = 30 [json_name = "mouthFunnel"];
inline void BlendShapes::clear_mouthfunnel() {
  mouthfunnel_ = 0;
}
inline float BlendShapes::_internal_mouthfunnel() const {
  return mouthfunnel_;
}
inline float BlendShapes::mouthfunnel() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthFunnel)
  return _internal_mouthfunnel();
}
inline void BlendShapes::_internal_set_mouthfunnel(float value) {
  
  mouthfunnel_ = value;
}
inline void BlendShapes::set_mouthfunnel(float value) {
  _internal_set_mouthfunnel(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthFunnel)
}

// float mouthLeft = 31 [json_name = "mouthLeft"];
inline void BlendShapes::clear_mouthleft() {
  mouthleft_ = 0;
}
inline float BlendShapes::_internal_mouthleft() const {
  return mouthleft_;
}
inline float BlendShapes::mouthleft() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthLeft)
  return _internal_mouthleft();
}
inline void BlendShapes::_internal_set_mouthleft(float value) {
  
  mouthleft_ = value;
}
inline void BlendShapes::set_mouthleft(float value) {
  _internal_set_mouthleft(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthLeft)
}

// float mouthLowerDown_L = 32 [json_name = "mouthLowerDownL"];
inline void BlendShapes::clear_mouthlowerdown_l() {
  mouthlowerdown_l_ = 0;
}
inline float BlendShapes::_internal_mouthlowerdown_l() const {
  return mouthlowerdown_l_;
}
inline float BlendShapes::mouthlowerdown_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthLowerDown_L)
  return _internal_mouthlowerdown_l();
}
inline void BlendShapes::_internal_set_mouthlowerdown_l(float value) {
  
  mouthlowerdown_l_ = value;
}
inline void BlendShapes::set_mouthlowerdown_l(float value) {
  _internal_set_mouthlowerdown_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthLowerDown_L)
}

// float mouthLowerDown_R = 33 [json_name = "mouthLowerDownR"];
inline void BlendShapes::clear_mouthlowerdown_r() {
  mouthlowerdown_r_ = 0;
}
inline float BlendShapes::_internal_mouthlowerdown_r() const {
  return mouthlowerdown_r_;
}
inline float BlendShapes::mouthlowerdown_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthLowerDown_R)
  return _internal_mouthlowerdown_r();
}
inline void BlendShapes::_internal_set_mouthlowerdown_r(float value) {
  
  mouthlowerdown_r_ = value;
}
inline void BlendShapes::set_mouthlowerdown_r(float value) {
  _internal_set_mouthlowerdown_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthLowerDown_R)
}

// float mouthPress_L = 34 [json_name = "mouthPressL"];
inline void BlendShapes::clear_mouthpress_l() {
  mouthpress_l_ = 0;
}
inline float BlendShapes::_internal_mouthpress_l() const {
  return mouthpress_l_;
}
inline float BlendShapes::mouthpress_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthPress_L)
  return _internal_mouthpress_l();
}
inline void BlendShapes::_internal_set_mouthpress_l(float value) {
  
  mouthpress_l_ = value;
}
inline void BlendShapes::set_mouthpress_l(float value) {
  _internal_set_mouthpress_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthPress_L)
}

// float mouthPress_R = 35 [json_name = "mouthPressR"];
inline void BlendShapes::clear_mouthpress_r() {
  mouthpress_r_ = 0;
}
inline float BlendShapes::_internal_mouthpress_r() const {
  return mouthpress_r_;
}
inline float BlendShapes::mouthpress_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthPress_R)
  return _internal_mouthpress_r();
}
inline void BlendShapes::_internal_set_mouthpress_r(float value) {
  
  mouthpress_r_ = value;
}
inline void BlendShapes::set_mouthpress_r(float value) {
  _internal_set_mouthpress_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthPress_R)
}

// float mouthPucker = 36 [json_name = "mouthPucker"];
inline void BlendShapes::clear_mouthpucker() {
  mouthpucker_ = 0;
}
inline float BlendShapes::_internal_mouthpucker() const {
  return mouthpucker_;
}
inline float BlendShapes::mouthpucker() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthPucker)
  return _internal_mouthpucker();
}
inline void BlendShapes::_internal_set_mouthpucker(float value) {
  
  mouthpucker_ = value;
}
inline void BlendShapes::set_mouthpucker(float value) {
  _internal_set_mouthpucker(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthPucker)
}

// float mouthRight = 37 [json_name = "mouthRight"];
inline void BlendShapes::clear_mouthright() {
  mouthright_ = 0;
}
inline float BlendShapes::_internal_mouthright() const {
  return mouthright_;
}
inline float BlendShapes::mouthright() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthRight)
  return _internal_mouthright();
}
inline void BlendShapes::_internal_set_mouthright(float value) {
  
  mouthright_ = value;
}
inline void BlendShapes::set_mouthright(float value) {
  _internal_set_mouthright(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthRight)
}

// float mouthRollLower = 38 [json_name = "mouthRollLower"];
inline void BlendShapes::clear_mouthrolllower() {
  mouthrolllower_ = 0;
}
inline float BlendShapes::_internal_mouthrolllower() const {
  return mouthrolllower_;
}
inline float BlendShapes::mouthrolllower() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthRollLower)
  return _internal_mouthrolllower();
}
inline void BlendShapes::_internal_set_mouthrolllower(float value) {
  
  mouthrolllower_ = value;
}
inline void BlendShapes::set_mouthrolllower(float value) {
  _internal_set_mouthrolllower(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthRollLower)
}

// float mouthRollUpper = 39 [json_name = "mouthRollUpper"];
inline void BlendShapes::clear_mouthrollupper() {
  mouthrollupper_ = 0;
}
inline float BlendShapes::_internal_mouthrollupper() const {
  return mouthrollupper_;
}
inline float BlendShapes::mouthrollupper() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthRollUpper)
  return _internal_mouthrollupper();
}
inline void BlendShapes::_internal_set_mouthrollupper(float value) {
  
  mouthrollupper_ = value;
}
inline void BlendShapes::set_mouthrollupper(float value) {
  _internal_set_mouthrollupper(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthRollUpper)
}

// float mouthShrugLower = 40 [json_name = "mouthShrugLower"];
inline void BlendShapes::clear_mouthshruglower() {
  mouthshruglower_ = 0;
}
inline float BlendShapes::_internal_mouthshruglower() const {
  return mouthshruglower_;
}
inline float BlendShapes::mouthshruglower() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthShrugLower)
  return _internal_mouthshruglower();
}
inline void BlendShapes::_internal_set_mouthshruglower(float value) {
  
  mouthshruglower_ = value;
}
inline void BlendShapes::set_mouthshruglower(float value) {
  _internal_set_mouthshruglower(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthShrugLower)
}

// float mouthShrugUpper = 41 [json_name = "mouthShrugUpper"];
inline void BlendShapes::clear_mouthshrugupper() {
  mouthshrugupper_ = 0;
}
inline float BlendShapes::_internal_mouthshrugupper() const {
  return mouthshrugupper_;
}
inline float BlendShapes::mouthshrugupper() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthShrugUpper)
  return _internal_mouthshrugupper();
}
inline void BlendShapes::_internal_set_mouthshrugupper(float value) {
  
  mouthshrugupper_ = value;
}
inline void BlendShapes::set_mouthshrugupper(float value) {
  _internal_set_mouthshrugupper(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthShrugUpper)
}

// float mouthSmile_L = 42 [json_name = "mouthSmileL"];
inline void BlendShapes::clear_mouthsmile_l() {
  mouthsmile_l_ = 0;
}
inline float BlendShapes::_internal_mouthsmile_l() const {
  return mouthsmile_l_;
}
inline float BlendShapes::mouthsmile_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthSmile_L)
  return _internal_mouthsmile_l();
}
inline void BlendShapes::_internal_set_mouthsmile_l(float value) {
  
  mouthsmile_l_ = value;
}
inline void BlendShapes::set_mouthsmile_l(float value) {
  _internal_set_mouthsmile_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthSmile_L)
}

// float mouthSmile_R = 43 [json_name = "mouthSmileR"];
inline void BlendShapes::clear_mouthsmile_r() {
  mouthsmile_r_ = 0;
}
inline float BlendShapes::_internal_mouthsmile_r() const {
  return mouthsmile_r_;
}
inline float BlendShapes::mouthsmile_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthSmile_R)
  return _internal_mouthsmile_r();
}
inline void BlendShapes::_internal_set_mouthsmile_r(float value) {
  
  mouthsmile_r_ = value;
}
inline void BlendShapes::set_mouthsmile_r(float value) {
  _internal_set_mouthsmile_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthSmile_R)
}

// float mouthStretch_L = 44 [json_name = "mouthStretchL"];
inline void BlendShapes::clear_mouthstretch_l() {
  mouthstretch_l_ = 0;
}
inline float BlendShapes::_internal_mouthstretch_l() const {
  return mouthstretch_l_;
}
inline float BlendShapes::mouthstretch_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthStretch_L)
  return _internal_mouthstretch_l();
}
inline void BlendShapes::_internal_set_mouthstretch_l(float value) {
  
  mouthstretch_l_ = value;
}
inline void BlendShapes::set_mouthstretch_l(float value) {
  _internal_set_mouthstretch_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthStretch_L)
}

// float mouthStretch_R = 45 [json_name = "mouthStretchR"];
inline void BlendShapes::clear_mouthstretch_r() {
  mouthstretch_r_ = 0;
}
inline float BlendShapes::_internal_mouthstretch_r() const {
  return mouthstretch_r_;
}
inline float BlendShapes::mouthstretch_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthStretch_R)
  return _internal_mouthstretch_r();
}
inline void BlendShapes::_internal_set_mouthstretch_r(float value) {
  
  mouthstretch_r_ = value;
}
inline void BlendShapes::set_mouthstretch_r(float value) {
  _internal_set_mouthstretch_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthStretch_R)
}

// float mouthUpperUp_L = 46 [json_name = "mouthUpperUpL"];
inline void BlendShapes::clear_mouthupperup_l() {
  mouthupperup_l_ = 0;
}
inline float BlendShapes::_internal_mouthupperup_l() const {
  return mouthupperup_l_;
}
inline float BlendShapes::mouthupperup_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthUpperUp_L)
  return _internal_mouthupperup_l();
}
inline void BlendShapes::_internal_set_mouthupperup_l(float value) {
  
  mouthupperup_l_ = value;
}
inline void BlendShapes::set_mouthupperup_l(float value) {
  _internal_set_mouthupperup_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthUpperUp_L)
}

// float mouthUpperUp_R = 47 [json_name = "mouthUpperUpR"];
inline void BlendShapes::clear_mouthupperup_r() {
  mouthupperup_r_ = 0;
}
inline float BlendShapes::_internal_mouthupperup_r() const {
  return mouthupperup_r_;
}
inline float BlendShapes::mouthupperup_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.mouthUpperUp_R)
  return _internal_mouthupperup_r();
}
inline void BlendShapes::_internal_set_mouthupperup_r(float value) {
  
  mouthupperup_r_ = value;
}
inline void BlendShapes::set_mouthupperup_r(float value) {
  _internal_set_mouthupperup_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.mouthUpperUp_R)
}

// float noseSneer_L = 48 [json_name = "noseSneerL"];
inline void BlendShapes::clear_nosesneer_l() {
  nosesneer_l_ = 0;
}
inline float BlendShapes::_internal_nosesneer_l() const {
  return nosesneer_l_;
}
inline float BlendShapes::nosesneer_l() const {
  // @@protoc_insertion_point(field_get:BlendShapes.noseSneer_L)
  return _internal_nosesneer_l();
}
inline void BlendShapes::_internal_set_nosesneer_l(float value) {
  
  nosesneer_l_ = value;
}
inline void BlendShapes::set_nosesneer_l(float value) {
  _internal_set_nosesneer_l(value);
  // @@protoc_insertion_point(field_set:BlendShapes.noseSneer_L)
}

// float noseSneer_R = 49 [json_name = "noseSneerR"];
inline void BlendShapes::clear_nosesneer_r() {
  nosesneer_r_ = 0;
}
inline float BlendShapes::_internal_nosesneer_r() const {
  return nosesneer_r_;
}
inline float BlendShapes::nosesneer_r() const {
  // @@protoc_insertion_point(field_get:BlendShapes.noseSneer_R)
  return _internal_nosesneer_r();
}
inline void BlendShapes::_internal_set_nosesneer_r(float value) {
  
  nosesneer_r_ = value;
}
inline void BlendShapes::set_nosesneer_r(float value) {
  _internal_set_nosesneer_r(value);
  // @@protoc_insertion_point(field_set:BlendShapes.noseSneer_R)
}

// float cheekPuff = 50 [json_name = "cheekPuff"];
inline void BlendShapes::clear_cheekpuff() {
  cheekpuff_ = 0;
}
inline float BlendShapes::_internal_cheekpuff() const {
  return cheekpuff_;
}
inline float BlendShapes::cheekpuff() const {
  // @@protoc_insertion_point(field_get:BlendShapes.cheekPuff)
  return _internal_cheekpuff();
}
inline void BlendShapes::_internal_set_cheekpuff(float value) {
  
  cheekpuff_ = value;
}
inline void BlendShapes::set_cheekpuff(float value) {
  _internal_set_cheekpuff(value);
  // @@protoc_insertion_point(field_set:BlendShapes.cheekPuff)
}

// float jawForward = 51 [json_name = "jawForward"];
inline void BlendShapes::clear_jawforward() {
  jawforward_ = 0;
}
inline float BlendShapes::_internal_jawforward() const {
  return jawforward_;
}
inline float BlendShapes::jawforward() const {
  // @@protoc_insertion_point(field_get:BlendShapes.jawForward)
  return _internal_jawforward();
}
inline void BlendShapes::_internal_set_jawforward(float value) {
  
  jawforward_ = value;
}
inline void BlendShapes::set_jawforward(float value) {
  _internal_set_jawforward(value);
  // @@protoc_insertion_point(field_set:BlendShapes.jawForward)
}

// float tongueOut = 52 [json_name = "tongueOut"];
inline void BlendShapes::clear_tongueout() {
  tongueout_ = 0;
}
inline float BlendShapes::_internal_tongueout() const {
  return tongueout_;
}
inline float BlendShapes::tongueout() const {
  // @@protoc_insertion_point(field_get:BlendShapes.tongueOut)
  return _internal_tongueout();
}
inline void BlendShapes::_internal_set_tongueout(float value) {
  
  tongueout_ = value;
}
inline void BlendShapes::set_tongueout(float value) {
  _internal_set_tongueout(value);
  // @@protoc_insertion_point(field_set:BlendShapes.tongueOut)
}

// -------------------------------------------------------------------

// Rotation

// optional float pitch = 1 [json_name = "pitch"];
inline bool Rotation::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Rotation::has_pitch() const {
  return _internal_has_pitch();
}
inline void Rotation::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Rotation::_internal_pitch() const {
  return pitch_;
}
inline float Rotation::pitch() const {
  // @@protoc_insertion_point(field_get:Rotation.pitch)
  return _internal_pitch();
}
inline void Rotation::_internal_set_pitch(float value) {
  _has_bits_[0] |= 0x00000001u;
  pitch_ = value;
}
inline void Rotation::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:Rotation.pitch)
}

// optional float roll = 2 [json_name = "roll"];
inline bool Rotation::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Rotation::has_roll() const {
  return _internal_has_roll();
}
inline void Rotation::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Rotation::_internal_roll() const {
  return roll_;
}
inline float Rotation::roll() const {
  // @@protoc_insertion_point(field_get:Rotation.roll)
  return _internal_roll();
}
inline void Rotation::_internal_set_roll(float value) {
  _has_bits_[0] |= 0x00000002u;
  roll_ = value;
}
inline void Rotation::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:Rotation.roll)
}

// optional float yaw = 3 [json_name = "yaw"];
inline bool Rotation::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Rotation::has_yaw() const {
  return _internal_has_yaw();
}
inline void Rotation::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Rotation::_internal_yaw() const {
  return yaw_;
}
inline float Rotation::yaw() const {
  // @@protoc_insertion_point(field_get:Rotation.yaw)
  return _internal_yaw();
}
inline void Rotation::_internal_set_yaw(float value) {
  _has_bits_[0] |= 0x00000004u;
  yaw_ = value;
}
inline void Rotation::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Rotation.yaw)
}

// -------------------------------------------------------------------

// Transform

// optional float x = 1 [json_name = "x"];
inline bool Transform::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Transform::has_x() const {
  return _internal_has_x();
}
inline void Transform::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Transform::_internal_x() const {
  return x_;
}
inline float Transform::x() const {
  // @@protoc_insertion_point(field_get:Transform.x)
  return _internal_x();
}
inline void Transform::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Transform::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Transform.x)
}

// optional float y = 2 [json_name = "y"];
inline bool Transform::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Transform::has_y() const {
  return _internal_has_y();
}
inline void Transform::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Transform::_internal_y() const {
  return y_;
}
inline float Transform::y() const {
  // @@protoc_insertion_point(field_get:Transform.y)
  return _internal_y();
}
inline void Transform::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Transform::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Transform.y)
}

// optional float z = 3 [json_name = "z"];
inline bool Transform::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Transform::has_z() const {
  return _internal_has_z();
}
inline void Transform::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Transform::_internal_z() const {
  return z_;
}
inline float Transform::z() const {
  // @@protoc_insertion_point(field_get:Transform.z)
  return _internal_z();
}
inline void Transform::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Transform::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Transform.z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_avatar_5fmessage_2eproto
