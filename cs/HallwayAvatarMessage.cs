// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: hallway_avatar_message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from hallway_avatar_message.proto</summary>
public static partial class HallwayAvatarMessageReflection {

  #region Descriptor
  /// <summary>File descriptor for hallway_avatar_message.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static HallwayAvatarMessageReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChxoYWxsd2F5X2F2YXRhcl9tZXNzYWdlLnByb3RvIqABChdIYWxsd2F5QXZh",
          "dGFyUHJlZGljdGlvbhIuCgtibGVuZFNoYXBlcxgBIAEoCzIMLkJsZW5kU2hh",
          "cGVzUgtibGVuZFNoYXBlcxIlCghyb3RhdGlvbhgCIAEoCzIJLlJvdGF0aW9u",
          "Ughyb3RhdGlvbhIuCgt0cmFuc2xhdGlvbhgDIAEoCzIMLlRyYW5zbGF0aW9u",
          "Ugt0cmFuc2xhdGlvbiKRDgoLQmxlbmRTaGFwZXMSIAoLYnJvd0lubmVyVXAY",
          "ASABKAJSC2Jyb3dJbm5lclVwEh0KCmJyb3dEb3duX0wYAiABKAJSCWJyb3dE",
          "b3duTBIdCgpicm93RG93bl9SGAMgASgCUglicm93RG93blISIwoNYnJvd091",
          "dGVyVXBfTBgEIAEoAlIMYnJvd091dGVyVXBMEiMKDWJyb3dPdXRlclVwX1IY",
          "BSABKAJSDGJyb3dPdXRlclVwUhIfCgtleWVMb29rVXBfTBgGIAEoAlIKZXll",
          "TG9va1VwTBIfCgtleWVMb29rVXBfUhgHIAEoAlIKZXllTG9va1VwUhIjCg1l",
          "eWVMb29rRG93bl9MGAggASgCUgxleWVMb29rRG93bkwSIwoNZXllTG9va0Rv",
          "d25fUhgJIAEoAlIMZXllTG9va0Rvd25SEh8KC2V5ZUxvb2tJbl9MGAogASgC",
          "UgpleWVMb29rSW5MEh8KC2V5ZUxvb2tJbl9SGAsgASgCUgpleWVMb29rSW5S",
          "EiEKDGV5ZUxvb2tPdXRfTBgMIAEoAlILZXllTG9va091dEwSIQoMZXllTG9v",
          "a091dF9SGA0gASgCUgtleWVMb29rT3V0UhIdCgpleWVCbGlua19MGA4gASgC",
          "UglleWVCbGlua0wSHQoKZXllQmxpbmtfUhgPIAEoAlIJZXllQmxpbmtSEh8K",
          "C2V5ZVNxdWludF9MGBAgASgCUgpleWVTcXVpbnRMEh8KC2V5ZVNxdWludF9S",
          "GBEgASgCUgpleWVTcXVpbnRSEhsKCWV5ZVdpZGVfTBgSIAEoAlIIZXllV2lk",
          "ZUwSGwoJZXllV2lkZV9SGBMgASgCUghleWVXaWRlUhIcCgljaGVla1B1ZmYY",
          "FCABKAJSCWNoZWVrUHVmZhIjCg1jaGVla1NxdWludF9MGBUgASgCUgxjaGVl",
          "a1NxdWludEwSIwoNY2hlZWtTcXVpbnRfUhgWIAEoAlIMY2hlZWtTcXVpbnRS",
          "Eh8KC25vc2VTbmVlcl9MGBcgASgCUgpub3NlU25lZXJMEh8KC25vc2VTbmVl",
          "cl9SGBggASgCUgpub3NlU25lZXJSEhgKB2phd09wZW4YGSABKAJSB2phd09w",
          "ZW4SHgoKamF3Rm9yd2FyZBgaIAEoAlIKamF3Rm9yd2FyZBIYCgdqYXdMZWZ0",
          "GBsgASgCUgdqYXdMZWZ0EhoKCGphd1JpZ2h0GBwgASgCUghqYXdSaWdodBIg",
          "Cgttb3V0aEZ1bm5lbBgdIAEoAlILbW91dGhGdW5uZWwSIAoLbW91dGhQdWNr",
          "ZXIYHiABKAJSC21vdXRoUHVja2VyEhwKCW1vdXRoTGVmdBgfIAEoAlIJbW91",
          "dGhMZWZ0Eh4KCm1vdXRoUmlnaHQYICABKAJSCm1vdXRoUmlnaHQSJgoObW91",
          "dGhSb2xsVXBwZXIYISABKAJSDm1vdXRoUm9sbFVwcGVyEiYKDm1vdXRoUm9s",
          "bExvd2VyGCIgASgCUg5tb3V0aFJvbGxMb3dlchIoCg9tb3V0aFNocnVnVXBw",
          "ZXIYIyABKAJSD21vdXRoU2hydWdVcHBlchIoCg9tb3V0aFNocnVnTG93ZXIY",
          "JCABKAJSD21vdXRoU2hydWdMb3dlchIeCgptb3V0aENsb3NlGCUgASgCUgpt",
          "b3V0aENsb3NlEiEKDG1vdXRoU21pbGVfTBgmIAEoAlILbW91dGhTbWlsZUwS",
          "IQoMbW91dGhTbWlsZV9SGCcgASgCUgttb3V0aFNtaWxlUhIhCgxtb3V0aEZy",
          "b3duX0wYKCABKAJSC21vdXRoRnJvd25MEiEKDG1vdXRoRnJvd25fUhgpIAEo",
          "AlILbW91dGhGcm93blISIwoNbW91dGhEaW1wbGVfTBgqIAEoAlIMbW91dGhE",
          "aW1wbGVMEiMKDW1vdXRoRGltcGxlX1IYKyABKAJSDG1vdXRoRGltcGxlUhIl",
          "Cg5tb3V0aFVwcGVyVXBfTBgsIAEoAlINbW91dGhVcHBlclVwTBIlCg5tb3V0",
          "aFVwcGVyVXBfUhgtIAEoAlINbW91dGhVcHBlclVwUhIpChBtb3V0aExvd2Vy",
          "RG93bl9MGC4gASgCUg9tb3V0aExvd2VyRG93bkwSKQoQbW91dGhMb3dlckRv",
          "d25fUhgvIAEoAlIPbW91dGhMb3dlckRvd25SEiEKDG1vdXRoUHJlc3NfTBgw",
          "IAEoAlILbW91dGhQcmVzc0wSIQoMbW91dGhQcmVzc19SGDEgASgCUgttb3V0",
          "aFByZXNzUhIlCg5tb3V0aFN0cmV0Y2hfTBgyIAEoAlINbW91dGhTdHJldGNo",
          "TBIlCg5tb3V0aFN0cmV0Y2hfUhgzIAEoAlINbW91dGhTdHJldGNoUhIcCgl0",
          "b25ndWVPdXQYNCABKAJSCXRvbmd1ZU91dCJwCghSb3RhdGlvbhIZCgVwaXRj",
          "aBgBIAEoAkgAUgVwaXRjaIgBARIVCgN5YXcYAiABKAJIAVIDeWF3iAEBEhcK",
          "BHJvbGwYAyABKAJIAlIEcm9sbIgBAUIICgZfcGl0Y2hCBgoEX3lhd0IHCgVf",
          "cm9sbCJYCgtUcmFuc2xhdGlvbhIRCgF4GAEgASgCSABSAXiIAQESEQoBeRgC",
          "IAEoAkgBUgF5iAEBEhEKAXoYAyABKAJIAlIBeogBAUIECgJfeEIECgJfeUIE",
          "CgJfemIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::HallwayAvatarPrediction), global::HallwayAvatarPrediction.Parser, new[]{ "BlendShapes", "Rotation", "Translation" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BlendShapes), global::BlendShapes.Parser, new[]{ "BrowInnerUp", "BrowDownL", "BrowDownR", "BrowOuterUpL", "BrowOuterUpR", "EyeLookUpL", "EyeLookUpR", "EyeLookDownL", "EyeLookDownR", "EyeLookInL", "EyeLookInR", "EyeLookOutL", "EyeLookOutR", "EyeBlinkL", "EyeBlinkR", "EyeSquintL", "EyeSquintR", "EyeWideL", "EyeWideR", "CheekPuff", "CheekSquintL", "CheekSquintR", "NoseSneerL", "NoseSneerR", "JawOpen", "JawForward", "JawLeft", "JawRight", "MouthFunnel", "MouthPucker", "MouthLeft", "MouthRight", "MouthRollUpper", "MouthRollLower", "MouthShrugUpper", "MouthShrugLower", "MouthClose", "MouthSmileL", "MouthSmileR", "MouthFrownL", "MouthFrownR", "MouthDimpleL", "MouthDimpleR", "MouthUpperUpL", "MouthUpperUpR", "MouthLowerDownL", "MouthLowerDownR", "MouthPressL", "MouthPressR", "MouthStretchL", "MouthStretchR", "TongueOut" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Rotation), global::Rotation.Parser, new[]{ "Pitch", "Yaw", "Roll" }, new[]{ "Pitch", "Yaw", "Roll" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Translation), global::Translation.Parser, new[]{ "X", "Y", "Z" }, new[]{ "X", "Y", "Z" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class HallwayAvatarPrediction : pb::IMessage<HallwayAvatarPrediction>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<HallwayAvatarPrediction> _parser = new pb::MessageParser<HallwayAvatarPrediction>(() => new HallwayAvatarPrediction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<HallwayAvatarPrediction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallwayAvatarMessageReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public HallwayAvatarPrediction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public HallwayAvatarPrediction(HallwayAvatarPrediction other) : this() {
    blendShapes_ = other.blendShapes_ != null ? other.blendShapes_.Clone() : null;
    rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
    translation_ = other.translation_ != null ? other.translation_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public HallwayAvatarPrediction Clone() {
    return new HallwayAvatarPrediction(this);
  }

  /// <summary>Field number for the "blendShapes" field.</summary>
  public const int BlendShapesFieldNumber = 1;
  private global::BlendShapes blendShapes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::BlendShapes BlendShapes {
    get { return blendShapes_; }
    set {
      blendShapes_ = value;
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 2;
  private global::Rotation rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Rotation Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  /// <summary>Field number for the "translation" field.</summary>
  public const int TranslationFieldNumber = 3;
  private global::Translation translation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Translation Translation {
    get { return translation_; }
    set {
      translation_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as HallwayAvatarPrediction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(HallwayAvatarPrediction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BlendShapes, other.BlendShapes)) return false;
    if (!object.Equals(Rotation, other.Rotation)) return false;
    if (!object.Equals(Translation, other.Translation)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (blendShapes_ != null) hash ^= BlendShapes.GetHashCode();
    if (rotation_ != null) hash ^= Rotation.GetHashCode();
    if (translation_ != null) hash ^= Translation.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (blendShapes_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BlendShapes);
    }
    if (rotation_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Rotation);
    }
    if (translation_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Translation);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (blendShapes_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BlendShapes);
    }
    if (rotation_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Rotation);
    }
    if (translation_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Translation);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (blendShapes_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlendShapes);
    }
    if (rotation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
    }
    if (translation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Translation);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(HallwayAvatarPrediction other) {
    if (other == null) {
      return;
    }
    if (other.blendShapes_ != null) {
      if (blendShapes_ == null) {
        BlendShapes = new global::BlendShapes();
      }
      BlendShapes.MergeFrom(other.BlendShapes);
    }
    if (other.rotation_ != null) {
      if (rotation_ == null) {
        Rotation = new global::Rotation();
      }
      Rotation.MergeFrom(other.Rotation);
    }
    if (other.translation_ != null) {
      if (translation_ == null) {
        Translation = new global::Translation();
      }
      Translation.MergeFrom(other.Translation);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (blendShapes_ == null) {
            BlendShapes = new global::BlendShapes();
          }
          input.ReadMessage(BlendShapes);
          break;
        }
        case 18: {
          if (rotation_ == null) {
            Rotation = new global::Rotation();
          }
          input.ReadMessage(Rotation);
          break;
        }
        case 26: {
          if (translation_ == null) {
            Translation = new global::Translation();
          }
          input.ReadMessage(Translation);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (blendShapes_ == null) {
            BlendShapes = new global::BlendShapes();
          }
          input.ReadMessage(BlendShapes);
          break;
        }
        case 18: {
          if (rotation_ == null) {
            Rotation = new global::Rotation();
          }
          input.ReadMessage(Rotation);
          break;
        }
        case 26: {
          if (translation_ == null) {
            Translation = new global::Translation();
          }
          input.ReadMessage(Translation);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class BlendShapes : pb::IMessage<BlendShapes>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<BlendShapes> _parser = new pb::MessageParser<BlendShapes>(() => new BlendShapes());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<BlendShapes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallwayAvatarMessageReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public BlendShapes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public BlendShapes(BlendShapes other) : this() {
    browInnerUp_ = other.browInnerUp_;
    browDownL_ = other.browDownL_;
    browDownR_ = other.browDownR_;
    browOuterUpL_ = other.browOuterUpL_;
    browOuterUpR_ = other.browOuterUpR_;
    eyeLookUpL_ = other.eyeLookUpL_;
    eyeLookUpR_ = other.eyeLookUpR_;
    eyeLookDownL_ = other.eyeLookDownL_;
    eyeLookDownR_ = other.eyeLookDownR_;
    eyeLookInL_ = other.eyeLookInL_;
    eyeLookInR_ = other.eyeLookInR_;
    eyeLookOutL_ = other.eyeLookOutL_;
    eyeLookOutR_ = other.eyeLookOutR_;
    eyeBlinkL_ = other.eyeBlinkL_;
    eyeBlinkR_ = other.eyeBlinkR_;
    eyeSquintL_ = other.eyeSquintL_;
    eyeSquintR_ = other.eyeSquintR_;
    eyeWideL_ = other.eyeWideL_;
    eyeWideR_ = other.eyeWideR_;
    cheekPuff_ = other.cheekPuff_;
    cheekSquintL_ = other.cheekSquintL_;
    cheekSquintR_ = other.cheekSquintR_;
    noseSneerL_ = other.noseSneerL_;
    noseSneerR_ = other.noseSneerR_;
    jawOpen_ = other.jawOpen_;
    jawForward_ = other.jawForward_;
    jawLeft_ = other.jawLeft_;
    jawRight_ = other.jawRight_;
    mouthFunnel_ = other.mouthFunnel_;
    mouthPucker_ = other.mouthPucker_;
    mouthLeft_ = other.mouthLeft_;
    mouthRight_ = other.mouthRight_;
    mouthRollUpper_ = other.mouthRollUpper_;
    mouthRollLower_ = other.mouthRollLower_;
    mouthShrugUpper_ = other.mouthShrugUpper_;
    mouthShrugLower_ = other.mouthShrugLower_;
    mouthClose_ = other.mouthClose_;
    mouthSmileL_ = other.mouthSmileL_;
    mouthSmileR_ = other.mouthSmileR_;
    mouthFrownL_ = other.mouthFrownL_;
    mouthFrownR_ = other.mouthFrownR_;
    mouthDimpleL_ = other.mouthDimpleL_;
    mouthDimpleR_ = other.mouthDimpleR_;
    mouthUpperUpL_ = other.mouthUpperUpL_;
    mouthUpperUpR_ = other.mouthUpperUpR_;
    mouthLowerDownL_ = other.mouthLowerDownL_;
    mouthLowerDownR_ = other.mouthLowerDownR_;
    mouthPressL_ = other.mouthPressL_;
    mouthPressR_ = other.mouthPressR_;
    mouthStretchL_ = other.mouthStretchL_;
    mouthStretchR_ = other.mouthStretchR_;
    tongueOut_ = other.tongueOut_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public BlendShapes Clone() {
    return new BlendShapes(this);
  }

  /// <summary>Field number for the "browInnerUp" field.</summary>
  public const int BrowInnerUpFieldNumber = 1;
  private float browInnerUp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float BrowInnerUp {
    get { return browInnerUp_; }
    set {
      browInnerUp_ = value;
    }
  }

  /// <summary>Field number for the "browDown_L" field.</summary>
  public const int BrowDownLFieldNumber = 2;
  private float browDownL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float BrowDownL {
    get { return browDownL_; }
    set {
      browDownL_ = value;
    }
  }

  /// <summary>Field number for the "browDown_R" field.</summary>
  public const int BrowDownRFieldNumber = 3;
  private float browDownR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float BrowDownR {
    get { return browDownR_; }
    set {
      browDownR_ = value;
    }
  }

  /// <summary>Field number for the "browOuterUp_L" field.</summary>
  public const int BrowOuterUpLFieldNumber = 4;
  private float browOuterUpL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float BrowOuterUpL {
    get { return browOuterUpL_; }
    set {
      browOuterUpL_ = value;
    }
  }

  /// <summary>Field number for the "browOuterUp_R" field.</summary>
  public const int BrowOuterUpRFieldNumber = 5;
  private float browOuterUpR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float BrowOuterUpR {
    get { return browOuterUpR_; }
    set {
      browOuterUpR_ = value;
    }
  }

  /// <summary>Field number for the "eyeLookUp_L" field.</summary>
  public const int EyeLookUpLFieldNumber = 6;
  private float eyeLookUpL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float EyeLookUpL {
    get { return eyeLookUpL_; }
    set {
      eyeLookUpL_ = value;
    }
  }

  /// <summary>Field number for the "eyeLookUp_R" field.</summary>
  public const int EyeLookUpRFieldNumber = 7;
  private float eyeLookUpR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float EyeLookUpR {
    get { return eyeLookUpR_; }
    set {
      eyeLookUpR_ = value;
    }
  }

  /// <summary>Field number for the "eyeLookDown_L" field.</summary>
  public const int EyeLookDownLFieldNumber = 8;
  private float eyeLookDownL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float EyeLookDownL {
    get { return eyeLookDownL_; }
    set {
      eyeLookDownL_ = value;
    }
  }

  /// <summary>Field number for the "eyeLookDown_R" field.</summary>
  public const int EyeLookDownRFieldNumber = 9;
  private float eyeLookDownR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float EyeLookDownR {
    get { return eyeLookDownR_; }
    set {
      eyeLookDownR_ = value;
    }
  }

  /// <summary>Field number for the "eyeLookIn_L" field.</summary>
  public const int EyeLookInLFieldNumber = 10;
  private float eyeLookInL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float EyeLookInL {
    get { return eyeLookInL_; }
    set {
      eyeLookInL_ = value;
    }
  }

  /// <summary>Field number for the "eyeLookIn_R" field.</summary>
  public const int EyeLookInRFieldNumber = 11;
  private float eyeLookInR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float EyeLookInR {
    get { return eyeLookInR_; }
    set {
      eyeLookInR_ = value;
    }
  }

  /// <summary>Field number for the "eyeLookOut_L" field.</summary>
  public const int EyeLookOutLFieldNumber = 12;
  private float eyeLookOutL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float EyeLookOutL {
    get { return eyeLookOutL_; }
    set {
      eyeLookOutL_ = value;
    }
  }

  /// <summary>Field number for the "eyeLookOut_R" field.</summary>
  public const int EyeLookOutRFieldNumber = 13;
  private float eyeLookOutR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float EyeLookOutR {
    get { return eyeLookOutR_; }
    set {
      eyeLookOutR_ = value;
    }
  }

  /// <summary>Field number for the "eyeBlink_L" field.</summary>
  public const int EyeBlinkLFieldNumber = 14;
  private float eyeBlinkL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float EyeBlinkL {
    get { return eyeBlinkL_; }
    set {
      eyeBlinkL_ = value;
    }
  }

  /// <summary>Field number for the "eyeBlink_R" field.</summary>
  public const int EyeBlinkRFieldNumber = 15;
  private float eyeBlinkR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float EyeBlinkR {
    get { return eyeBlinkR_; }
    set {
      eyeBlinkR_ = value;
    }
  }

  /// <summary>Field number for the "eyeSquint_L" field.</summary>
  public const int EyeSquintLFieldNumber = 16;
  private float eyeSquintL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float EyeSquintL {
    get { return eyeSquintL_; }
    set {
      eyeSquintL_ = value;
    }
  }

  /// <summary>Field number for the "eyeSquint_R" field.</summary>
  public const int EyeSquintRFieldNumber = 17;
  private float eyeSquintR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float EyeSquintR {
    get { return eyeSquintR_; }
    set {
      eyeSquintR_ = value;
    }
  }

  /// <summary>Field number for the "eyeWide_L" field.</summary>
  public const int EyeWideLFieldNumber = 18;
  private float eyeWideL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float EyeWideL {
    get { return eyeWideL_; }
    set {
      eyeWideL_ = value;
    }
  }

  /// <summary>Field number for the "eyeWide_R" field.</summary>
  public const int EyeWideRFieldNumber = 19;
  private float eyeWideR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float EyeWideR {
    get { return eyeWideR_; }
    set {
      eyeWideR_ = value;
    }
  }

  /// <summary>Field number for the "cheekPuff" field.</summary>
  public const int CheekPuffFieldNumber = 20;
  private float cheekPuff_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float CheekPuff {
    get { return cheekPuff_; }
    set {
      cheekPuff_ = value;
    }
  }

  /// <summary>Field number for the "cheekSquint_L" field.</summary>
  public const int CheekSquintLFieldNumber = 21;
  private float cheekSquintL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float CheekSquintL {
    get { return cheekSquintL_; }
    set {
      cheekSquintL_ = value;
    }
  }

  /// <summary>Field number for the "cheekSquint_R" field.</summary>
  public const int CheekSquintRFieldNumber = 22;
  private float cheekSquintR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float CheekSquintR {
    get { return cheekSquintR_; }
    set {
      cheekSquintR_ = value;
    }
  }

  /// <summary>Field number for the "noseSneer_L" field.</summary>
  public const int NoseSneerLFieldNumber = 23;
  private float noseSneerL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float NoseSneerL {
    get { return noseSneerL_; }
    set {
      noseSneerL_ = value;
    }
  }

  /// <summary>Field number for the "noseSneer_R" field.</summary>
  public const int NoseSneerRFieldNumber = 24;
  private float noseSneerR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float NoseSneerR {
    get { return noseSneerR_; }
    set {
      noseSneerR_ = value;
    }
  }

  /// <summary>Field number for the "jawOpen" field.</summary>
  public const int JawOpenFieldNumber = 25;
  private float jawOpen_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float JawOpen {
    get { return jawOpen_; }
    set {
      jawOpen_ = value;
    }
  }

  /// <summary>Field number for the "jawForward" field.</summary>
  public const int JawForwardFieldNumber = 26;
  private float jawForward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float JawForward {
    get { return jawForward_; }
    set {
      jawForward_ = value;
    }
  }

  /// <summary>Field number for the "jawLeft" field.</summary>
  public const int JawLeftFieldNumber = 27;
  private float jawLeft_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float JawLeft {
    get { return jawLeft_; }
    set {
      jawLeft_ = value;
    }
  }

  /// <summary>Field number for the "jawRight" field.</summary>
  public const int JawRightFieldNumber = 28;
  private float jawRight_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float JawRight {
    get { return jawRight_; }
    set {
      jawRight_ = value;
    }
  }

  /// <summary>Field number for the "mouthFunnel" field.</summary>
  public const int MouthFunnelFieldNumber = 29;
  private float mouthFunnel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthFunnel {
    get { return mouthFunnel_; }
    set {
      mouthFunnel_ = value;
    }
  }

  /// <summary>Field number for the "mouthPucker" field.</summary>
  public const int MouthPuckerFieldNumber = 30;
  private float mouthPucker_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthPucker {
    get { return mouthPucker_; }
    set {
      mouthPucker_ = value;
    }
  }

  /// <summary>Field number for the "mouthLeft" field.</summary>
  public const int MouthLeftFieldNumber = 31;
  private float mouthLeft_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthLeft {
    get { return mouthLeft_; }
    set {
      mouthLeft_ = value;
    }
  }

  /// <summary>Field number for the "mouthRight" field.</summary>
  public const int MouthRightFieldNumber = 32;
  private float mouthRight_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthRight {
    get { return mouthRight_; }
    set {
      mouthRight_ = value;
    }
  }

  /// <summary>Field number for the "mouthRollUpper" field.</summary>
  public const int MouthRollUpperFieldNumber = 33;
  private float mouthRollUpper_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthRollUpper {
    get { return mouthRollUpper_; }
    set {
      mouthRollUpper_ = value;
    }
  }

  /// <summary>Field number for the "mouthRollLower" field.</summary>
  public const int MouthRollLowerFieldNumber = 34;
  private float mouthRollLower_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthRollLower {
    get { return mouthRollLower_; }
    set {
      mouthRollLower_ = value;
    }
  }

  /// <summary>Field number for the "mouthShrugUpper" field.</summary>
  public const int MouthShrugUpperFieldNumber = 35;
  private float mouthShrugUpper_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthShrugUpper {
    get { return mouthShrugUpper_; }
    set {
      mouthShrugUpper_ = value;
    }
  }

  /// <summary>Field number for the "mouthShrugLower" field.</summary>
  public const int MouthShrugLowerFieldNumber = 36;
  private float mouthShrugLower_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthShrugLower {
    get { return mouthShrugLower_; }
    set {
      mouthShrugLower_ = value;
    }
  }

  /// <summary>Field number for the "mouthClose" field.</summary>
  public const int MouthCloseFieldNumber = 37;
  private float mouthClose_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthClose {
    get { return mouthClose_; }
    set {
      mouthClose_ = value;
    }
  }

  /// <summary>Field number for the "mouthSmile_L" field.</summary>
  public const int MouthSmileLFieldNumber = 38;
  private float mouthSmileL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthSmileL {
    get { return mouthSmileL_; }
    set {
      mouthSmileL_ = value;
    }
  }

  /// <summary>Field number for the "mouthSmile_R" field.</summary>
  public const int MouthSmileRFieldNumber = 39;
  private float mouthSmileR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthSmileR {
    get { return mouthSmileR_; }
    set {
      mouthSmileR_ = value;
    }
  }

  /// <summary>Field number for the "mouthFrown_L" field.</summary>
  public const int MouthFrownLFieldNumber = 40;
  private float mouthFrownL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthFrownL {
    get { return mouthFrownL_; }
    set {
      mouthFrownL_ = value;
    }
  }

  /// <summary>Field number for the "mouthFrown_R" field.</summary>
  public const int MouthFrownRFieldNumber = 41;
  private float mouthFrownR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthFrownR {
    get { return mouthFrownR_; }
    set {
      mouthFrownR_ = value;
    }
  }

  /// <summary>Field number for the "mouthDimple_L" field.</summary>
  public const int MouthDimpleLFieldNumber = 42;
  private float mouthDimpleL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthDimpleL {
    get { return mouthDimpleL_; }
    set {
      mouthDimpleL_ = value;
    }
  }

  /// <summary>Field number for the "mouthDimple_R" field.</summary>
  public const int MouthDimpleRFieldNumber = 43;
  private float mouthDimpleR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthDimpleR {
    get { return mouthDimpleR_; }
    set {
      mouthDimpleR_ = value;
    }
  }

  /// <summary>Field number for the "mouthUpperUp_L" field.</summary>
  public const int MouthUpperUpLFieldNumber = 44;
  private float mouthUpperUpL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthUpperUpL {
    get { return mouthUpperUpL_; }
    set {
      mouthUpperUpL_ = value;
    }
  }

  /// <summary>Field number for the "mouthUpperUp_R" field.</summary>
  public const int MouthUpperUpRFieldNumber = 45;
  private float mouthUpperUpR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthUpperUpR {
    get { return mouthUpperUpR_; }
    set {
      mouthUpperUpR_ = value;
    }
  }

  /// <summary>Field number for the "mouthLowerDown_L" field.</summary>
  public const int MouthLowerDownLFieldNumber = 46;
  private float mouthLowerDownL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthLowerDownL {
    get { return mouthLowerDownL_; }
    set {
      mouthLowerDownL_ = value;
    }
  }

  /// <summary>Field number for the "mouthLowerDown_R" field.</summary>
  public const int MouthLowerDownRFieldNumber = 47;
  private float mouthLowerDownR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthLowerDownR {
    get { return mouthLowerDownR_; }
    set {
      mouthLowerDownR_ = value;
    }
  }

  /// <summary>Field number for the "mouthPress_L" field.</summary>
  public const int MouthPressLFieldNumber = 48;
  private float mouthPressL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthPressL {
    get { return mouthPressL_; }
    set {
      mouthPressL_ = value;
    }
  }

  /// <summary>Field number for the "mouthPress_R" field.</summary>
  public const int MouthPressRFieldNumber = 49;
  private float mouthPressR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthPressR {
    get { return mouthPressR_; }
    set {
      mouthPressR_ = value;
    }
  }

  /// <summary>Field number for the "mouthStretch_L" field.</summary>
  public const int MouthStretchLFieldNumber = 50;
  private float mouthStretchL_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthStretchL {
    get { return mouthStretchL_; }
    set {
      mouthStretchL_ = value;
    }
  }

  /// <summary>Field number for the "mouthStretch_R" field.</summary>
  public const int MouthStretchRFieldNumber = 51;
  private float mouthStretchR_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MouthStretchR {
    get { return mouthStretchR_; }
    set {
      mouthStretchR_ = value;
    }
  }

  /// <summary>Field number for the "tongueOut" field.</summary>
  public const int TongueOutFieldNumber = 52;
  private float tongueOut_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float TongueOut {
    get { return tongueOut_; }
    set {
      tongueOut_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as BlendShapes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(BlendShapes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrowInnerUp, other.BrowInnerUp)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrowDownL, other.BrowDownL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrowDownR, other.BrowDownR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrowOuterUpL, other.BrowOuterUpL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrowOuterUpR, other.BrowOuterUpR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookUpL, other.EyeLookUpL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookUpR, other.EyeLookUpR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookDownL, other.EyeLookDownL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookDownR, other.EyeLookDownR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookInL, other.EyeLookInL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookInR, other.EyeLookInR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookOutL, other.EyeLookOutL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeLookOutR, other.EyeLookOutR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeBlinkL, other.EyeBlinkL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeBlinkR, other.EyeBlinkR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeSquintL, other.EyeSquintL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeSquintR, other.EyeSquintR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeWideL, other.EyeWideL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EyeWideR, other.EyeWideR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheekPuff, other.CheekPuff)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheekSquintL, other.CheekSquintL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CheekSquintR, other.CheekSquintR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NoseSneerL, other.NoseSneerL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NoseSneerR, other.NoseSneerR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JawOpen, other.JawOpen)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JawForward, other.JawForward)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JawLeft, other.JawLeft)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JawRight, other.JawRight)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthFunnel, other.MouthFunnel)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthPucker, other.MouthPucker)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthLeft, other.MouthLeft)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthRight, other.MouthRight)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthRollUpper, other.MouthRollUpper)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthRollLower, other.MouthRollLower)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthShrugUpper, other.MouthShrugUpper)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthShrugLower, other.MouthShrugLower)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthClose, other.MouthClose)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthSmileL, other.MouthSmileL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthSmileR, other.MouthSmileR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthFrownL, other.MouthFrownL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthFrownR, other.MouthFrownR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthDimpleL, other.MouthDimpleL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthDimpleR, other.MouthDimpleR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthUpperUpL, other.MouthUpperUpL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthUpperUpR, other.MouthUpperUpR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthLowerDownL, other.MouthLowerDownL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthLowerDownR, other.MouthLowerDownR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthPressL, other.MouthPressL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthPressR, other.MouthPressR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthStretchL, other.MouthStretchL)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MouthStretchR, other.MouthStretchR)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TongueOut, other.TongueOut)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (BrowInnerUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrowInnerUp);
    if (BrowDownL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrowDownL);
    if (BrowDownR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrowDownR);
    if (BrowOuterUpL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrowOuterUpL);
    if (BrowOuterUpR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrowOuterUpR);
    if (EyeLookUpL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookUpL);
    if (EyeLookUpR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookUpR);
    if (EyeLookDownL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookDownL);
    if (EyeLookDownR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookDownR);
    if (EyeLookInL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookInL);
    if (EyeLookInR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookInR);
    if (EyeLookOutL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookOutL);
    if (EyeLookOutR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeLookOutR);
    if (EyeBlinkL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeBlinkL);
    if (EyeBlinkR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeBlinkR);
    if (EyeSquintL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeSquintL);
    if (EyeSquintR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeSquintR);
    if (EyeWideL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeWideL);
    if (EyeWideR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EyeWideR);
    if (CheekPuff != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheekPuff);
    if (CheekSquintL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheekSquintL);
    if (CheekSquintR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CheekSquintR);
    if (NoseSneerL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NoseSneerL);
    if (NoseSneerR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NoseSneerR);
    if (JawOpen != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JawOpen);
    if (JawForward != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JawForward);
    if (JawLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JawLeft);
    if (JawRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JawRight);
    if (MouthFunnel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthFunnel);
    if (MouthPucker != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthPucker);
    if (MouthLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthLeft);
    if (MouthRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthRight);
    if (MouthRollUpper != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthRollUpper);
    if (MouthRollLower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthRollLower);
    if (MouthShrugUpper != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthShrugUpper);
    if (MouthShrugLower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthShrugLower);
    if (MouthClose != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthClose);
    if (MouthSmileL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthSmileL);
    if (MouthSmileR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthSmileR);
    if (MouthFrownL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthFrownL);
    if (MouthFrownR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthFrownR);
    if (MouthDimpleL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthDimpleL);
    if (MouthDimpleR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthDimpleR);
    if (MouthUpperUpL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthUpperUpL);
    if (MouthUpperUpR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthUpperUpR);
    if (MouthLowerDownL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthLowerDownL);
    if (MouthLowerDownR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthLowerDownR);
    if (MouthPressL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthPressL);
    if (MouthPressR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthPressR);
    if (MouthStretchL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthStretchL);
    if (MouthStretchR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MouthStretchR);
    if (TongueOut != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TongueOut);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (BrowInnerUp != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(BrowInnerUp);
    }
    if (BrowDownL != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(BrowDownL);
    }
    if (BrowDownR != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(BrowDownR);
    }
    if (BrowOuterUpL != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(BrowOuterUpL);
    }
    if (BrowOuterUpR != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(BrowOuterUpR);
    }
    if (EyeLookUpL != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(EyeLookUpL);
    }
    if (EyeLookUpR != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(EyeLookUpR);
    }
    if (EyeLookDownL != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(EyeLookDownL);
    }
    if (EyeLookDownR != 0F) {
      output.WriteRawTag(77);
      output.WriteFloat(EyeLookDownR);
    }
    if (EyeLookInL != 0F) {
      output.WriteRawTag(85);
      output.WriteFloat(EyeLookInL);
    }
    if (EyeLookInR != 0F) {
      output.WriteRawTag(93);
      output.WriteFloat(EyeLookInR);
    }
    if (EyeLookOutL != 0F) {
      output.WriteRawTag(101);
      output.WriteFloat(EyeLookOutL);
    }
    if (EyeLookOutR != 0F) {
      output.WriteRawTag(109);
      output.WriteFloat(EyeLookOutR);
    }
    if (EyeBlinkL != 0F) {
      output.WriteRawTag(117);
      output.WriteFloat(EyeBlinkL);
    }
    if (EyeBlinkR != 0F) {
      output.WriteRawTag(125);
      output.WriteFloat(EyeBlinkR);
    }
    if (EyeSquintL != 0F) {
      output.WriteRawTag(133, 1);
      output.WriteFloat(EyeSquintL);
    }
    if (EyeSquintR != 0F) {
      output.WriteRawTag(141, 1);
      output.WriteFloat(EyeSquintR);
    }
    if (EyeWideL != 0F) {
      output.WriteRawTag(149, 1);
      output.WriteFloat(EyeWideL);
    }
    if (EyeWideR != 0F) {
      output.WriteRawTag(157, 1);
      output.WriteFloat(EyeWideR);
    }
    if (CheekPuff != 0F) {
      output.WriteRawTag(165, 1);
      output.WriteFloat(CheekPuff);
    }
    if (CheekSquintL != 0F) {
      output.WriteRawTag(173, 1);
      output.WriteFloat(CheekSquintL);
    }
    if (CheekSquintR != 0F) {
      output.WriteRawTag(181, 1);
      output.WriteFloat(CheekSquintR);
    }
    if (NoseSneerL != 0F) {
      output.WriteRawTag(189, 1);
      output.WriteFloat(NoseSneerL);
    }
    if (NoseSneerR != 0F) {
      output.WriteRawTag(197, 1);
      output.WriteFloat(NoseSneerR);
    }
    if (JawOpen != 0F) {
      output.WriteRawTag(205, 1);
      output.WriteFloat(JawOpen);
    }
    if (JawForward != 0F) {
      output.WriteRawTag(213, 1);
      output.WriteFloat(JawForward);
    }
    if (JawLeft != 0F) {
      output.WriteRawTag(221, 1);
      output.WriteFloat(JawLeft);
    }
    if (JawRight != 0F) {
      output.WriteRawTag(229, 1);
      output.WriteFloat(JawRight);
    }
    if (MouthFunnel != 0F) {
      output.WriteRawTag(237, 1);
      output.WriteFloat(MouthFunnel);
    }
    if (MouthPucker != 0F) {
      output.WriteRawTag(245, 1);
      output.WriteFloat(MouthPucker);
    }
    if (MouthLeft != 0F) {
      output.WriteRawTag(253, 1);
      output.WriteFloat(MouthLeft);
    }
    if (MouthRight != 0F) {
      output.WriteRawTag(133, 2);
      output.WriteFloat(MouthRight);
    }
    if (MouthRollUpper != 0F) {
      output.WriteRawTag(141, 2);
      output.WriteFloat(MouthRollUpper);
    }
    if (MouthRollLower != 0F) {
      output.WriteRawTag(149, 2);
      output.WriteFloat(MouthRollLower);
    }
    if (MouthShrugUpper != 0F) {
      output.WriteRawTag(157, 2);
      output.WriteFloat(MouthShrugUpper);
    }
    if (MouthShrugLower != 0F) {
      output.WriteRawTag(165, 2);
      output.WriteFloat(MouthShrugLower);
    }
    if (MouthClose != 0F) {
      output.WriteRawTag(173, 2);
      output.WriteFloat(MouthClose);
    }
    if (MouthSmileL != 0F) {
      output.WriteRawTag(181, 2);
      output.WriteFloat(MouthSmileL);
    }
    if (MouthSmileR != 0F) {
      output.WriteRawTag(189, 2);
      output.WriteFloat(MouthSmileR);
    }
    if (MouthFrownL != 0F) {
      output.WriteRawTag(197, 2);
      output.WriteFloat(MouthFrownL);
    }
    if (MouthFrownR != 0F) {
      output.WriteRawTag(205, 2);
      output.WriteFloat(MouthFrownR);
    }
    if (MouthDimpleL != 0F) {
      output.WriteRawTag(213, 2);
      output.WriteFloat(MouthDimpleL);
    }
    if (MouthDimpleR != 0F) {
      output.WriteRawTag(221, 2);
      output.WriteFloat(MouthDimpleR);
    }
    if (MouthUpperUpL != 0F) {
      output.WriteRawTag(229, 2);
      output.WriteFloat(MouthUpperUpL);
    }
    if (MouthUpperUpR != 0F) {
      output.WriteRawTag(237, 2);
      output.WriteFloat(MouthUpperUpR);
    }
    if (MouthLowerDownL != 0F) {
      output.WriteRawTag(245, 2);
      output.WriteFloat(MouthLowerDownL);
    }
    if (MouthLowerDownR != 0F) {
      output.WriteRawTag(253, 2);
      output.WriteFloat(MouthLowerDownR);
    }
    if (MouthPressL != 0F) {
      output.WriteRawTag(133, 3);
      output.WriteFloat(MouthPressL);
    }
    if (MouthPressR != 0F) {
      output.WriteRawTag(141, 3);
      output.WriteFloat(MouthPressR);
    }
    if (MouthStretchL != 0F) {
      output.WriteRawTag(149, 3);
      output.WriteFloat(MouthStretchL);
    }
    if (MouthStretchR != 0F) {
      output.WriteRawTag(157, 3);
      output.WriteFloat(MouthStretchR);
    }
    if (TongueOut != 0F) {
      output.WriteRawTag(165, 3);
      output.WriteFloat(TongueOut);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (BrowInnerUp != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(BrowInnerUp);
    }
    if (BrowDownL != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(BrowDownL);
    }
    if (BrowDownR != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(BrowDownR);
    }
    if (BrowOuterUpL != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(BrowOuterUpL);
    }
    if (BrowOuterUpR != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(BrowOuterUpR);
    }
    if (EyeLookUpL != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(EyeLookUpL);
    }
    if (EyeLookUpR != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(EyeLookUpR);
    }
    if (EyeLookDownL != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(EyeLookDownL);
    }
    if (EyeLookDownR != 0F) {
      output.WriteRawTag(77);
      output.WriteFloat(EyeLookDownR);
    }
    if (EyeLookInL != 0F) {
      output.WriteRawTag(85);
      output.WriteFloat(EyeLookInL);
    }
    if (EyeLookInR != 0F) {
      output.WriteRawTag(93);
      output.WriteFloat(EyeLookInR);
    }
    if (EyeLookOutL != 0F) {
      output.WriteRawTag(101);
      output.WriteFloat(EyeLookOutL);
    }
    if (EyeLookOutR != 0F) {
      output.WriteRawTag(109);
      output.WriteFloat(EyeLookOutR);
    }
    if (EyeBlinkL != 0F) {
      output.WriteRawTag(117);
      output.WriteFloat(EyeBlinkL);
    }
    if (EyeBlinkR != 0F) {
      output.WriteRawTag(125);
      output.WriteFloat(EyeBlinkR);
    }
    if (EyeSquintL != 0F) {
      output.WriteRawTag(133, 1);
      output.WriteFloat(EyeSquintL);
    }
    if (EyeSquintR != 0F) {
      output.WriteRawTag(141, 1);
      output.WriteFloat(EyeSquintR);
    }
    if (EyeWideL != 0F) {
      output.WriteRawTag(149, 1);
      output.WriteFloat(EyeWideL);
    }
    if (EyeWideR != 0F) {
      output.WriteRawTag(157, 1);
      output.WriteFloat(EyeWideR);
    }
    if (CheekPuff != 0F) {
      output.WriteRawTag(165, 1);
      output.WriteFloat(CheekPuff);
    }
    if (CheekSquintL != 0F) {
      output.WriteRawTag(173, 1);
      output.WriteFloat(CheekSquintL);
    }
    if (CheekSquintR != 0F) {
      output.WriteRawTag(181, 1);
      output.WriteFloat(CheekSquintR);
    }
    if (NoseSneerL != 0F) {
      output.WriteRawTag(189, 1);
      output.WriteFloat(NoseSneerL);
    }
    if (NoseSneerR != 0F) {
      output.WriteRawTag(197, 1);
      output.WriteFloat(NoseSneerR);
    }
    if (JawOpen != 0F) {
      output.WriteRawTag(205, 1);
      output.WriteFloat(JawOpen);
    }
    if (JawForward != 0F) {
      output.WriteRawTag(213, 1);
      output.WriteFloat(JawForward);
    }
    if (JawLeft != 0F) {
      output.WriteRawTag(221, 1);
      output.WriteFloat(JawLeft);
    }
    if (JawRight != 0F) {
      output.WriteRawTag(229, 1);
      output.WriteFloat(JawRight);
    }
    if (MouthFunnel != 0F) {
      output.WriteRawTag(237, 1);
      output.WriteFloat(MouthFunnel);
    }
    if (MouthPucker != 0F) {
      output.WriteRawTag(245, 1);
      output.WriteFloat(MouthPucker);
    }
    if (MouthLeft != 0F) {
      output.WriteRawTag(253, 1);
      output.WriteFloat(MouthLeft);
    }
    if (MouthRight != 0F) {
      output.WriteRawTag(133, 2);
      output.WriteFloat(MouthRight);
    }
    if (MouthRollUpper != 0F) {
      output.WriteRawTag(141, 2);
      output.WriteFloat(MouthRollUpper);
    }
    if (MouthRollLower != 0F) {
      output.WriteRawTag(149, 2);
      output.WriteFloat(MouthRollLower);
    }
    if (MouthShrugUpper != 0F) {
      output.WriteRawTag(157, 2);
      output.WriteFloat(MouthShrugUpper);
    }
    if (MouthShrugLower != 0F) {
      output.WriteRawTag(165, 2);
      output.WriteFloat(MouthShrugLower);
    }
    if (MouthClose != 0F) {
      output.WriteRawTag(173, 2);
      output.WriteFloat(MouthClose);
    }
    if (MouthSmileL != 0F) {
      output.WriteRawTag(181, 2);
      output.WriteFloat(MouthSmileL);
    }
    if (MouthSmileR != 0F) {
      output.WriteRawTag(189, 2);
      output.WriteFloat(MouthSmileR);
    }
    if (MouthFrownL != 0F) {
      output.WriteRawTag(197, 2);
      output.WriteFloat(MouthFrownL);
    }
    if (MouthFrownR != 0F) {
      output.WriteRawTag(205, 2);
      output.WriteFloat(MouthFrownR);
    }
    if (MouthDimpleL != 0F) {
      output.WriteRawTag(213, 2);
      output.WriteFloat(MouthDimpleL);
    }
    if (MouthDimpleR != 0F) {
      output.WriteRawTag(221, 2);
      output.WriteFloat(MouthDimpleR);
    }
    if (MouthUpperUpL != 0F) {
      output.WriteRawTag(229, 2);
      output.WriteFloat(MouthUpperUpL);
    }
    if (MouthUpperUpR != 0F) {
      output.WriteRawTag(237, 2);
      output.WriteFloat(MouthUpperUpR);
    }
    if (MouthLowerDownL != 0F) {
      output.WriteRawTag(245, 2);
      output.WriteFloat(MouthLowerDownL);
    }
    if (MouthLowerDownR != 0F) {
      output.WriteRawTag(253, 2);
      output.WriteFloat(MouthLowerDownR);
    }
    if (MouthPressL != 0F) {
      output.WriteRawTag(133, 3);
      output.WriteFloat(MouthPressL);
    }
    if (MouthPressR != 0F) {
      output.WriteRawTag(141, 3);
      output.WriteFloat(MouthPressR);
    }
    if (MouthStretchL != 0F) {
      output.WriteRawTag(149, 3);
      output.WriteFloat(MouthStretchL);
    }
    if (MouthStretchR != 0F) {
      output.WriteRawTag(157, 3);
      output.WriteFloat(MouthStretchR);
    }
    if (TongueOut != 0F) {
      output.WriteRawTag(165, 3);
      output.WriteFloat(TongueOut);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (BrowInnerUp != 0F) {
      size += 1 + 4;
    }
    if (BrowDownL != 0F) {
      size += 1 + 4;
    }
    if (BrowDownR != 0F) {
      size += 1 + 4;
    }
    if (BrowOuterUpL != 0F) {
      size += 1 + 4;
    }
    if (BrowOuterUpR != 0F) {
      size += 1 + 4;
    }
    if (EyeLookUpL != 0F) {
      size += 1 + 4;
    }
    if (EyeLookUpR != 0F) {
      size += 1 + 4;
    }
    if (EyeLookDownL != 0F) {
      size += 1 + 4;
    }
    if (EyeLookDownR != 0F) {
      size += 1 + 4;
    }
    if (EyeLookInL != 0F) {
      size += 1 + 4;
    }
    if (EyeLookInR != 0F) {
      size += 1 + 4;
    }
    if (EyeLookOutL != 0F) {
      size += 1 + 4;
    }
    if (EyeLookOutR != 0F) {
      size += 1 + 4;
    }
    if (EyeBlinkL != 0F) {
      size += 1 + 4;
    }
    if (EyeBlinkR != 0F) {
      size += 1 + 4;
    }
    if (EyeSquintL != 0F) {
      size += 2 + 4;
    }
    if (EyeSquintR != 0F) {
      size += 2 + 4;
    }
    if (EyeWideL != 0F) {
      size += 2 + 4;
    }
    if (EyeWideR != 0F) {
      size += 2 + 4;
    }
    if (CheekPuff != 0F) {
      size += 2 + 4;
    }
    if (CheekSquintL != 0F) {
      size += 2 + 4;
    }
    if (CheekSquintR != 0F) {
      size += 2 + 4;
    }
    if (NoseSneerL != 0F) {
      size += 2 + 4;
    }
    if (NoseSneerR != 0F) {
      size += 2 + 4;
    }
    if (JawOpen != 0F) {
      size += 2 + 4;
    }
    if (JawForward != 0F) {
      size += 2 + 4;
    }
    if (JawLeft != 0F) {
      size += 2 + 4;
    }
    if (JawRight != 0F) {
      size += 2 + 4;
    }
    if (MouthFunnel != 0F) {
      size += 2 + 4;
    }
    if (MouthPucker != 0F) {
      size += 2 + 4;
    }
    if (MouthLeft != 0F) {
      size += 2 + 4;
    }
    if (MouthRight != 0F) {
      size += 2 + 4;
    }
    if (MouthRollUpper != 0F) {
      size += 2 + 4;
    }
    if (MouthRollLower != 0F) {
      size += 2 + 4;
    }
    if (MouthShrugUpper != 0F) {
      size += 2 + 4;
    }
    if (MouthShrugLower != 0F) {
      size += 2 + 4;
    }
    if (MouthClose != 0F) {
      size += 2 + 4;
    }
    if (MouthSmileL != 0F) {
      size += 2 + 4;
    }
    if (MouthSmileR != 0F) {
      size += 2 + 4;
    }
    if (MouthFrownL != 0F) {
      size += 2 + 4;
    }
    if (MouthFrownR != 0F) {
      size += 2 + 4;
    }
    if (MouthDimpleL != 0F) {
      size += 2 + 4;
    }
    if (MouthDimpleR != 0F) {
      size += 2 + 4;
    }
    if (MouthUpperUpL != 0F) {
      size += 2 + 4;
    }
    if (MouthUpperUpR != 0F) {
      size += 2 + 4;
    }
    if (MouthLowerDownL != 0F) {
      size += 2 + 4;
    }
    if (MouthLowerDownR != 0F) {
      size += 2 + 4;
    }
    if (MouthPressL != 0F) {
      size += 2 + 4;
    }
    if (MouthPressR != 0F) {
      size += 2 + 4;
    }
    if (MouthStretchL != 0F) {
      size += 2 + 4;
    }
    if (MouthStretchR != 0F) {
      size += 2 + 4;
    }
    if (TongueOut != 0F) {
      size += 2 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(BlendShapes other) {
    if (other == null) {
      return;
    }
    if (other.BrowInnerUp != 0F) {
      BrowInnerUp = other.BrowInnerUp;
    }
    if (other.BrowDownL != 0F) {
      BrowDownL = other.BrowDownL;
    }
    if (other.BrowDownR != 0F) {
      BrowDownR = other.BrowDownR;
    }
    if (other.BrowOuterUpL != 0F) {
      BrowOuterUpL = other.BrowOuterUpL;
    }
    if (other.BrowOuterUpR != 0F) {
      BrowOuterUpR = other.BrowOuterUpR;
    }
    if (other.EyeLookUpL != 0F) {
      EyeLookUpL = other.EyeLookUpL;
    }
    if (other.EyeLookUpR != 0F) {
      EyeLookUpR = other.EyeLookUpR;
    }
    if (other.EyeLookDownL != 0F) {
      EyeLookDownL = other.EyeLookDownL;
    }
    if (other.EyeLookDownR != 0F) {
      EyeLookDownR = other.EyeLookDownR;
    }
    if (other.EyeLookInL != 0F) {
      EyeLookInL = other.EyeLookInL;
    }
    if (other.EyeLookInR != 0F) {
      EyeLookInR = other.EyeLookInR;
    }
    if (other.EyeLookOutL != 0F) {
      EyeLookOutL = other.EyeLookOutL;
    }
    if (other.EyeLookOutR != 0F) {
      EyeLookOutR = other.EyeLookOutR;
    }
    if (other.EyeBlinkL != 0F) {
      EyeBlinkL = other.EyeBlinkL;
    }
    if (other.EyeBlinkR != 0F) {
      EyeBlinkR = other.EyeBlinkR;
    }
    if (other.EyeSquintL != 0F) {
      EyeSquintL = other.EyeSquintL;
    }
    if (other.EyeSquintR != 0F) {
      EyeSquintR = other.EyeSquintR;
    }
    if (other.EyeWideL != 0F) {
      EyeWideL = other.EyeWideL;
    }
    if (other.EyeWideR != 0F) {
      EyeWideR = other.EyeWideR;
    }
    if (other.CheekPuff != 0F) {
      CheekPuff = other.CheekPuff;
    }
    if (other.CheekSquintL != 0F) {
      CheekSquintL = other.CheekSquintL;
    }
    if (other.CheekSquintR != 0F) {
      CheekSquintR = other.CheekSquintR;
    }
    if (other.NoseSneerL != 0F) {
      NoseSneerL = other.NoseSneerL;
    }
    if (other.NoseSneerR != 0F) {
      NoseSneerR = other.NoseSneerR;
    }
    if (other.JawOpen != 0F) {
      JawOpen = other.JawOpen;
    }
    if (other.JawForward != 0F) {
      JawForward = other.JawForward;
    }
    if (other.JawLeft != 0F) {
      JawLeft = other.JawLeft;
    }
    if (other.JawRight != 0F) {
      JawRight = other.JawRight;
    }
    if (other.MouthFunnel != 0F) {
      MouthFunnel = other.MouthFunnel;
    }
    if (other.MouthPucker != 0F) {
      MouthPucker = other.MouthPucker;
    }
    if (other.MouthLeft != 0F) {
      MouthLeft = other.MouthLeft;
    }
    if (other.MouthRight != 0F) {
      MouthRight = other.MouthRight;
    }
    if (other.MouthRollUpper != 0F) {
      MouthRollUpper = other.MouthRollUpper;
    }
    if (other.MouthRollLower != 0F) {
      MouthRollLower = other.MouthRollLower;
    }
    if (other.MouthShrugUpper != 0F) {
      MouthShrugUpper = other.MouthShrugUpper;
    }
    if (other.MouthShrugLower != 0F) {
      MouthShrugLower = other.MouthShrugLower;
    }
    if (other.MouthClose != 0F) {
      MouthClose = other.MouthClose;
    }
    if (other.MouthSmileL != 0F) {
      MouthSmileL = other.MouthSmileL;
    }
    if (other.MouthSmileR != 0F) {
      MouthSmileR = other.MouthSmileR;
    }
    if (other.MouthFrownL != 0F) {
      MouthFrownL = other.MouthFrownL;
    }
    if (other.MouthFrownR != 0F) {
      MouthFrownR = other.MouthFrownR;
    }
    if (other.MouthDimpleL != 0F) {
      MouthDimpleL = other.MouthDimpleL;
    }
    if (other.MouthDimpleR != 0F) {
      MouthDimpleR = other.MouthDimpleR;
    }
    if (other.MouthUpperUpL != 0F) {
      MouthUpperUpL = other.MouthUpperUpL;
    }
    if (other.MouthUpperUpR != 0F) {
      MouthUpperUpR = other.MouthUpperUpR;
    }
    if (other.MouthLowerDownL != 0F) {
      MouthLowerDownL = other.MouthLowerDownL;
    }
    if (other.MouthLowerDownR != 0F) {
      MouthLowerDownR = other.MouthLowerDownR;
    }
    if (other.MouthPressL != 0F) {
      MouthPressL = other.MouthPressL;
    }
    if (other.MouthPressR != 0F) {
      MouthPressR = other.MouthPressR;
    }
    if (other.MouthStretchL != 0F) {
      MouthStretchL = other.MouthStretchL;
    }
    if (other.MouthStretchR != 0F) {
      MouthStretchR = other.MouthStretchR;
    }
    if (other.TongueOut != 0F) {
      TongueOut = other.TongueOut;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          BrowInnerUp = input.ReadFloat();
          break;
        }
        case 21: {
          BrowDownL = input.ReadFloat();
          break;
        }
        case 29: {
          BrowDownR = input.ReadFloat();
          break;
        }
        case 37: {
          BrowOuterUpL = input.ReadFloat();
          break;
        }
        case 45: {
          BrowOuterUpR = input.ReadFloat();
          break;
        }
        case 53: {
          EyeLookUpL = input.ReadFloat();
          break;
        }
        case 61: {
          EyeLookUpR = input.ReadFloat();
          break;
        }
        case 69: {
          EyeLookDownL = input.ReadFloat();
          break;
        }
        case 77: {
          EyeLookDownR = input.ReadFloat();
          break;
        }
        case 85: {
          EyeLookInL = input.ReadFloat();
          break;
        }
        case 93: {
          EyeLookInR = input.ReadFloat();
          break;
        }
        case 101: {
          EyeLookOutL = input.ReadFloat();
          break;
        }
        case 109: {
          EyeLookOutR = input.ReadFloat();
          break;
        }
        case 117: {
          EyeBlinkL = input.ReadFloat();
          break;
        }
        case 125: {
          EyeBlinkR = input.ReadFloat();
          break;
        }
        case 133: {
          EyeSquintL = input.ReadFloat();
          break;
        }
        case 141: {
          EyeSquintR = input.ReadFloat();
          break;
        }
        case 149: {
          EyeWideL = input.ReadFloat();
          break;
        }
        case 157: {
          EyeWideR = input.ReadFloat();
          break;
        }
        case 165: {
          CheekPuff = input.ReadFloat();
          break;
        }
        case 173: {
          CheekSquintL = input.ReadFloat();
          break;
        }
        case 181: {
          CheekSquintR = input.ReadFloat();
          break;
        }
        case 189: {
          NoseSneerL = input.ReadFloat();
          break;
        }
        case 197: {
          NoseSneerR = input.ReadFloat();
          break;
        }
        case 205: {
          JawOpen = input.ReadFloat();
          break;
        }
        case 213: {
          JawForward = input.ReadFloat();
          break;
        }
        case 221: {
          JawLeft = input.ReadFloat();
          break;
        }
        case 229: {
          JawRight = input.ReadFloat();
          break;
        }
        case 237: {
          MouthFunnel = input.ReadFloat();
          break;
        }
        case 245: {
          MouthPucker = input.ReadFloat();
          break;
        }
        case 253: {
          MouthLeft = input.ReadFloat();
          break;
        }
        case 261: {
          MouthRight = input.ReadFloat();
          break;
        }
        case 269: {
          MouthRollUpper = input.ReadFloat();
          break;
        }
        case 277: {
          MouthRollLower = input.ReadFloat();
          break;
        }
        case 285: {
          MouthShrugUpper = input.ReadFloat();
          break;
        }
        case 293: {
          MouthShrugLower = input.ReadFloat();
          break;
        }
        case 301: {
          MouthClose = input.ReadFloat();
          break;
        }
        case 309: {
          MouthSmileL = input.ReadFloat();
          break;
        }
        case 317: {
          MouthSmileR = input.ReadFloat();
          break;
        }
        case 325: {
          MouthFrownL = input.ReadFloat();
          break;
        }
        case 333: {
          MouthFrownR = input.ReadFloat();
          break;
        }
        case 341: {
          MouthDimpleL = input.ReadFloat();
          break;
        }
        case 349: {
          MouthDimpleR = input.ReadFloat();
          break;
        }
        case 357: {
          MouthUpperUpL = input.ReadFloat();
          break;
        }
        case 365: {
          MouthUpperUpR = input.ReadFloat();
          break;
        }
        case 373: {
          MouthLowerDownL = input.ReadFloat();
          break;
        }
        case 381: {
          MouthLowerDownR = input.ReadFloat();
          break;
        }
        case 389: {
          MouthPressL = input.ReadFloat();
          break;
        }
        case 397: {
          MouthPressR = input.ReadFloat();
          break;
        }
        case 405: {
          MouthStretchL = input.ReadFloat();
          break;
        }
        case 413: {
          MouthStretchR = input.ReadFloat();
          break;
        }
        case 421: {
          TongueOut = input.ReadFloat();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          BrowInnerUp = input.ReadFloat();
          break;
        }
        case 21: {
          BrowDownL = input.ReadFloat();
          break;
        }
        case 29: {
          BrowDownR = input.ReadFloat();
          break;
        }
        case 37: {
          BrowOuterUpL = input.ReadFloat();
          break;
        }
        case 45: {
          BrowOuterUpR = input.ReadFloat();
          break;
        }
        case 53: {
          EyeLookUpL = input.ReadFloat();
          break;
        }
        case 61: {
          EyeLookUpR = input.ReadFloat();
          break;
        }
        case 69: {
          EyeLookDownL = input.ReadFloat();
          break;
        }
        case 77: {
          EyeLookDownR = input.ReadFloat();
          break;
        }
        case 85: {
          EyeLookInL = input.ReadFloat();
          break;
        }
        case 93: {
          EyeLookInR = input.ReadFloat();
          break;
        }
        case 101: {
          EyeLookOutL = input.ReadFloat();
          break;
        }
        case 109: {
          EyeLookOutR = input.ReadFloat();
          break;
        }
        case 117: {
          EyeBlinkL = input.ReadFloat();
          break;
        }
        case 125: {
          EyeBlinkR = input.ReadFloat();
          break;
        }
        case 133: {
          EyeSquintL = input.ReadFloat();
          break;
        }
        case 141: {
          EyeSquintR = input.ReadFloat();
          break;
        }
        case 149: {
          EyeWideL = input.ReadFloat();
          break;
        }
        case 157: {
          EyeWideR = input.ReadFloat();
          break;
        }
        case 165: {
          CheekPuff = input.ReadFloat();
          break;
        }
        case 173: {
          CheekSquintL = input.ReadFloat();
          break;
        }
        case 181: {
          CheekSquintR = input.ReadFloat();
          break;
        }
        case 189: {
          NoseSneerL = input.ReadFloat();
          break;
        }
        case 197: {
          NoseSneerR = input.ReadFloat();
          break;
        }
        case 205: {
          JawOpen = input.ReadFloat();
          break;
        }
        case 213: {
          JawForward = input.ReadFloat();
          break;
        }
        case 221: {
          JawLeft = input.ReadFloat();
          break;
        }
        case 229: {
          JawRight = input.ReadFloat();
          break;
        }
        case 237: {
          MouthFunnel = input.ReadFloat();
          break;
        }
        case 245: {
          MouthPucker = input.ReadFloat();
          break;
        }
        case 253: {
          MouthLeft = input.ReadFloat();
          break;
        }
        case 261: {
          MouthRight = input.ReadFloat();
          break;
        }
        case 269: {
          MouthRollUpper = input.ReadFloat();
          break;
        }
        case 277: {
          MouthRollLower = input.ReadFloat();
          break;
        }
        case 285: {
          MouthShrugUpper = input.ReadFloat();
          break;
        }
        case 293: {
          MouthShrugLower = input.ReadFloat();
          break;
        }
        case 301: {
          MouthClose = input.ReadFloat();
          break;
        }
        case 309: {
          MouthSmileL = input.ReadFloat();
          break;
        }
        case 317: {
          MouthSmileR = input.ReadFloat();
          break;
        }
        case 325: {
          MouthFrownL = input.ReadFloat();
          break;
        }
        case 333: {
          MouthFrownR = input.ReadFloat();
          break;
        }
        case 341: {
          MouthDimpleL = input.ReadFloat();
          break;
        }
        case 349: {
          MouthDimpleR = input.ReadFloat();
          break;
        }
        case 357: {
          MouthUpperUpL = input.ReadFloat();
          break;
        }
        case 365: {
          MouthUpperUpR = input.ReadFloat();
          break;
        }
        case 373: {
          MouthLowerDownL = input.ReadFloat();
          break;
        }
        case 381: {
          MouthLowerDownR = input.ReadFloat();
          break;
        }
        case 389: {
          MouthPressL = input.ReadFloat();
          break;
        }
        case 397: {
          MouthPressR = input.ReadFloat();
          break;
        }
        case 405: {
          MouthStretchL = input.ReadFloat();
          break;
        }
        case 413: {
          MouthStretchR = input.ReadFloat();
          break;
        }
        case 421: {
          TongueOut = input.ReadFloat();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class Rotation : pb::IMessage<Rotation>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallwayAvatarMessageReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Rotation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Rotation(Rotation other) : this() {
    _hasBits0 = other._hasBits0;
    pitch_ = other.pitch_;
    yaw_ = other.yaw_;
    roll_ = other.roll_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Rotation Clone() {
    return new Rotation(this);
  }

  /// <summary>Field number for the "pitch" field.</summary>
  public const int PitchFieldNumber = 1;
  private float pitch_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Pitch {
    get { if ((_hasBits0 & 1) != 0) { return pitch_; } else { return 0F; } }
    set {
      _hasBits0 |= 1;
      pitch_ = value;
    }
  }
  /// <summary>Gets whether the "pitch" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPitch {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "pitch" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPitch() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "yaw" field.</summary>
  public const int YawFieldNumber = 2;
  private float yaw_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Yaw {
    get { if ((_hasBits0 & 2) != 0) { return yaw_; } else { return 0F; } }
    set {
      _hasBits0 |= 2;
      yaw_ = value;
    }
  }
  /// <summary>Gets whether the "yaw" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasYaw {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "yaw" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearYaw() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "roll" field.</summary>
  public const int RollFieldNumber = 3;
  private float roll_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Roll {
    get { if ((_hasBits0 & 4) != 0) { return roll_; } else { return 0F; } }
    set {
      _hasBits0 |= 4;
      roll_ = value;
    }
  }
  /// <summary>Gets whether the "roll" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRoll {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "roll" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRoll() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as Rotation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(Rotation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Roll, other.Roll)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPitch) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pitch);
    if (HasYaw) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yaw);
    if (HasRoll) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Roll);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasPitch) {
      output.WriteRawTag(13);
      output.WriteFloat(Pitch);
    }
    if (HasYaw) {
      output.WriteRawTag(21);
      output.WriteFloat(Yaw);
    }
    if (HasRoll) {
      output.WriteRawTag(29);
      output.WriteFloat(Roll);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasPitch) {
      output.WriteRawTag(13);
      output.WriteFloat(Pitch);
    }
    if (HasYaw) {
      output.WriteRawTag(21);
      output.WriteFloat(Yaw);
    }
    if (HasRoll) {
      output.WriteRawTag(29);
      output.WriteFloat(Roll);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasPitch) {
      size += 1 + 4;
    }
    if (HasYaw) {
      size += 1 + 4;
    }
    if (HasRoll) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(Rotation other) {
    if (other == null) {
      return;
    }
    if (other.HasPitch) {
      Pitch = other.Pitch;
    }
    if (other.HasYaw) {
      Yaw = other.Yaw;
    }
    if (other.HasRoll) {
      Roll = other.Roll;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          Pitch = input.ReadFloat();
          break;
        }
        case 21: {
          Yaw = input.ReadFloat();
          break;
        }
        case 29: {
          Roll = input.ReadFloat();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          Pitch = input.ReadFloat();
          break;
        }
        case 21: {
          Yaw = input.ReadFloat();
          break;
        }
        case 29: {
          Roll = input.ReadFloat();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class Translation : pb::IMessage<Translation>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Translation> _parser = new pb::MessageParser<Translation>(() => new Translation());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<Translation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallwayAvatarMessageReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Translation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Translation(Translation other) : this() {
    _hasBits0 = other._hasBits0;
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Translation Clone() {
    return new Translation(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float X {
    get { if ((_hasBits0 & 1) != 0) { return x_; } else { return 0F; } }
    set {
      _hasBits0 |= 1;
      x_ = value;
    }
  }
  /// <summary>Gets whether the "x" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasX {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "x" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearX() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Y {
    get { if ((_hasBits0 & 2) != 0) { return y_; } else { return 0F; } }
    set {
      _hasBits0 |= 2;
      y_ = value;
    }
  }
  /// <summary>Gets whether the "y" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasY {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "y" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearY() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Z {
    get { if ((_hasBits0 & 4) != 0) { return z_; } else { return 0F; } }
    set {
      _hasBits0 |= 4;
      z_ = value;
    }
  }
  /// <summary>Gets whether the "z" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasZ {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "z" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearZ() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as Translation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(Translation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (HasZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasX) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (HasY) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (HasZ) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasX) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (HasY) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (HasZ) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasX) {
      size += 1 + 4;
    }
    if (HasY) {
      size += 1 + 4;
    }
    if (HasZ) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(Translation other) {
    if (other == null) {
      return;
    }
    if (other.HasX) {
      X = other.X;
    }
    if (other.HasY) {
      Y = other.Y;
    }
    if (other.HasZ) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
